<?php $OOO000000 = urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64');$GLOBALS['OOO0000O0'] = $OOO000000[4] . $OOO000000[9] . $OOO000000[3] . $OOO000000[5] . $OOO000000[2] . $OOO000000[10] . $OOO000000[13] . $OOO000000[16];$GLOBALS['OOO0000O0'] .= $GLOBALS['OOO0000O0'][3] . $OOO000000[11] . $OOO000000[12] . $GLOBALS['OOO0000O0'][7] . $OOO000000[5];$GLOBALS['O0O00OO00'] = $OOO000000[0] . $OOO000000[8] . $OOO000000[5] . $OOO000000[9] . $OOO000000[16];$GLOBALS['OOO000O00'] = $OOO000000[0] . $OOO000000[12] . $OOO000000[7] . $OOO000000[5] . $OOO000000[15];$GLOBALS['OOO00000O'] = $OOO000000[3] . $OOO000000[14] . $OOO000000[8] . $OOO000000[14] . $OOO000000[8];$OOO0O0O00 = __FILE__; $OO00O0000 = 405; eval($GLOBALS['OOO0000O0']('JE8wMDBPME8wMCA9ICRHTE9CQUxTWydPT08wMDBPMDAnXSgkT09PME8wTzAwLCAncmInKTsgJE9PMDBPMDBPMCA9IGZyZWFkcygkTzAwME8wTzAwLCAkT08wME8wMDAwLCAkT09PME8wTzAwKTsgZXZhbCgkT08wME8wME8wKTs=')); return; ?>+******************************************************************************
 * AKAt BKỆH At3
 * glEk9: mkmE@mkmE.Um
 * bIeskTI: mkmE.Um
 * BIhskQm: x.w 
 * nETI w5-wx-xwxZ
 * Đâv 9à Tàk sảm FủE oÔA0 Hc HASS H3 nB AKAt. Bpk 9òmJ 8jômJ sử fụmJ 8jk FjưE đượF qjéq.
 *+


mElIsqEFI AKAtoMNg\nETEeEsIoQhI\GpIhv;

psI rEF8Ifgmpl;
psI oEheQm\oEheQmaIhkQf;
psI o9QsphI;
psI nETIHklIKmTIhiEFI;
psI K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\rpk9fIh Es rpk9fIhoQmThEFT;
psI K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\oQmfkTkQmgVqhIsskQm;
psI K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm Es gVqhIsskQmoQmThEFT;
psI K99plkmETI\oQmThEFTs\OpqqQhT\thhEvEe9I;
psI AKAtoMNg\nETEeEsIoQhI\oQmFIhms\rpk9fsGpIhkIs;
psI AKAtoMNg\nETEeEsIoQhI\oQmFIhms\gVq9EkmsGpIhkIs;
psI AKAtoMNg\nETEeEsIoQhI\oQmmIFTkQmKmTIhiEFI;
psI AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh Es g9QRpImTrpk9fIh;
psI AKAtoMNg\nETEeEsIoQhI\g9QRpImT\NI9ETkQms\NI9ETkQm;
psI AKAtoMNg\nETEeEsIoQhI\GpIhv\0hEllEhs\0hEllEh;
psI AKAtoMNg\nETEeEsIoQhI\GpIhv\ahQFIssQhs\ahQFIssQh;
psI K99plkmETI\aEJkmETkQm\aEJkmETQh;
psI K99plkmETI\OpqqQhT\thh;
psI K99plkmETI\OpqqQhT\oQ99IFTkQm;
psI K99plkmETI\OpqqQhT\6EWvoQ99IFTkQm;
psI K99plkmETI\OpqqQhT\OTh;
psI K99plkmETI\OpqqQhT\HhEkTs\2QhuEhfsoE99s;
psI K99plkmETI\OpqqQhT\HhEkTs\3EFhQEe9I;
psI KmUE9kfthJplImTgVFIqTkQm;
psI 6QJkFgVFIqTkQm;
psI NpmTklIgVFIqTkQm;

F9Ess rpk9fIh klq9IlImTs rpk9fIhoQmThEFT
{
    psI rpk9fsGpIhkIs, gVq9EkmsGpIhkIs, 2QhuEhfsoE99s, 3EFhQEe9I {
        __FE99 Es lEFhQoE99;
    }

    +**
     * HjI fETEeEsI FQmmIFTkQm kmsTEmFI.
     *
     * @UEh \AKAtoMNg\nETEeEsIoQhI\oQmmIFTkQmKmTIhiEFI
     *+
    qpe9kF $FQmmIFTkQm;

    +**
     * HjI fETEeEsI RpIhv JhEllEh kmsTEmFI.
     *
     * @UEh \AKAtoMNg\nETEeEsIoQhI\GpIhv\0hEllEhs\0hEllEh
     *+
    qpe9kF $JhEllEh;

    +**
     * HjI fETEeEsI RpIhv qQsT qhQFIssQh kmsTEmFI.
     *
     * @UEh \AKAtoMNg\nETEeEsIoQhI\GpIhv\ahQFIssQhs\ahQFIssQh
     *+
    qpe9kF $qhQFIssQh;

    +**
     * HjI FphhImT RpIhv UE9pI ekmfkmJs.
     *
     * @UEh EhhEv
     *+
    qpe9kF $ekmfkmJs = [
        'sI9IFT' => [],
        'ihQl' => [],
        'LQkm' => [],
        'ujIhI' => [],
        'JhQpqrv' => [],
        'jEUkmJ' => [],
        'QhfIh' => [],
        'pmkQm' => [],
        'pmkQmMhfIh' => [],
    ];

    +**
     * tm EJJhIJETI ipmFTkQm Emf FQ9plm TQ eI hpm.
     *
     * @UEh EhhEv
     *+
    qpe9kF $EJJhIJETI;

    +**
     * HjI FQ9plms TjET sjQp9f eI hITphmIf.
     *
     * @UEh EhhEv|mp99
     *+
    qpe9kF $FQ9plms;

    +**
     * KmfkFETIs ki TjI RpIhv hITphms fksTkmFT hIsp9Ts.
     *
     * MFFEskQmE99v FQmTEkms TjI FQ9plms TjET sjQp9f eI fksTkmFT.
     *
     * @UEh eQQ9|EhhEv
     *+
    qpe9kF $fksTkmFT = iE9sI;

    +**
     * HjI TEe9I ujkFj TjI RpIhv ks TEhJITkmJ.
     *
     * @UEh \AKAtoMNg\nETEeEsIoQhI\GpIhv\gVqhIsskQm|sThkmJ
     *+
    qpe9kF $ihQl;

    +**
     * HjI kmfIV jkmT iQh TjI RpIhv.
     *
     * @UEh \AKAtoMNg\nETEeEsIoQhI\GpIhv\KmfIVSkmT
     *+
    qpe9kF $kmfIVSkmT;

    +**
     * HjI TEe9I LQkms iQh TjI RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $LQkms;

    +**
     * HjI ujIhI FQmsThEkmTs iQh TjI RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $ujIhIs = [];

    +**
     * HjI JhQpqkmJs iQh TjI RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $JhQpqs;

    +**
     * HjI jEUkmJ FQmsThEkmTs iQh TjI RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $jEUkmJs;

    +**
     * HjI QhfIhkmJs iQh TjI RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $QhfIhs;

    +**
     * HjI lEVklpl mpleIh Qi hIFQhfs TQ hITphm.
     *
     * @UEh kmT
     *+
    qpe9kF $9klkT;

    +**
     * HjI lEVklpl mpleIh Qi hIFQhfs TQ hITphm qIh JhQpq.
     *
     * @UEh EhhEv
     *+
    qpe9kF $JhQpq6klkT;

    +**
     * HjI mpleIh Qi hIFQhfs TQ s8kq.
     *
     * @UEh kmT
     *+
    qpe9kF $QiisIT;

    +**
     * HjI RpIhv pmkQm sTETIlImTs.
     *
     * @UEh EhhEv
     *+
    qpe9kF $pmkQms;

    +**
     * HjI lEVklpl mpleIh Qi pmkQm hIFQhfs TQ hITphm.
     *
     * @UEh kmT
     *+
    qpe9kF $pmkQm6klkT;

    +**
     * HjI mpleIh Qi pmkQm hIFQhfs TQ s8kq.
     *
     * @UEh kmT
     *+
    qpe9kF $pmkQmMiisIT;

    +**
     * HjI QhfIhkmJs iQh TjI pmkQm RpIhv.
     *
     * @UEh EhhEv
     *+
    qpe9kF $pmkQmMhfIhs;

    +**
     * KmfkFETIs ujITjIh hQu 9QF8kmJ ks eIkmJ psIf.
     *
     * @UEh sThkmJ|eQQ9
     *+
    qpe9kF $9QF8;

    +**
     * HjI FE99eEF8s TjET sjQp9f eI kmUQ8If eIiQhI TjI RpIhv ks IVIFpTIf.
     *
     * @UEh EhhEv
     *+
    qpe9kF $eIiQhIGpIhvoE99eEF8s = [];

    +**
     * t99 Qi TjI EUEk9Ee9I F9EpsI QqIhETQhs.
     *
     * @UEh sThkmJ[]
     *+
    qpe9kF $QqIhETQhs = [
        '=', '<', '>', '<=', '>=', '<>', '!=', '<=>',
        '9k8I', '9k8I ekmEhv', 'mQT 9k8I', 'k9k8I',
        '&', '|', '^', '<<', '>>', '&~', 'ks', 'ks mQT',
        'h9k8I', 'mQT h9k8I', 'hIJIVq', 'mQT hIJIVq',
        '~', '~*', '!~', '!~*', 'sklk9Eh TQ',
        'mQT sklk9Eh TQ', 'mQT k9k8I', '~~*', '!~~*',
    ];

    +**
     * t99 Qi TjI EUEk9Ee9I ekTuksI QqIhETQhs.
     *
     * @UEh sThkmJ[]
     *+
    qpe9kF $ekTuksIMqIhETQhs = [
        '&', '|', '^', '<<', '>>', '&~',
    ];

    +**
     * bjITjIh TQ psI uhkTI qfQ iQh TjI sI9IFT.
     *
     * @UEh eQQ9
     *+
    qpe9kF $psIbhkTIafQ = iE9sI;

    +**
     * ohIETI E mIu RpIhv epk9fIh kmsTEmFI.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\oQmmIFTkQmKmTIhiEFI  $FQmmIFTkQm
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\0hEllEhs\0hEllEh|mp99  $JhEllEh
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\ahQFIssQhs\ahQFIssQh|mp99  $qhQFIssQh
     * @hITphm UQkf
     *+
    qpe9kF ipmFTkQm __FQmsThpFT(oQmmIFTkQmKmTIhiEFI $FQmmIFTkQm,
                                0hEllEh $JhEllEh = mp99,
                                ahQFIssQh $qhQFIssQh = mp99)
    {
        $Tjks->FQmmIFTkQm = $FQmmIFTkQm;
        $Tjks->JhEllEh = $JhEllEh ?: $FQmmIFTkQm->JITGpIhv0hEllEh();
        $Tjks->qhQFIssQh = $qhQFIssQh ?: $FQmmIFTkQm->JITaQsTahQFIssQh();
    }

    +**
     * OIT TjI FQ9plms TQ eI sI9IFTIf.
     *
     * @qEhEl  EhhEv|lkVIf  $FQ9plms
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm sI9IFT($FQ9plms = ['*'])
    {
        $Tjks->FQ9plms = [];
        $Tjks->ekmfkmJs['sI9IFT'] = [];

        $FQ9plms = ks_EhhEv($FQ9plms) ? $FQ9plms : ipmF_JIT_EhJs();

        iQhIEFj ($FQ9plms Es $Es => $FQ9plm) {
            ki (ks_sThkmJ($Es) && $Tjks->ksGpIhvEe9I($FQ9plm)) {
                $Tjks->sI9IFTOpe($FQ9plm, $Es);
            } I9sI {
                $Tjks->FQ9plms[] = $FQ9plm;
            }
        }

        hITphm $Tjks;
    }

    +**
     * tff E spesI9IFT IVqhIsskQm TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm sI9IFTOpe($RpIhv, $Es)
    {
        [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        hITphm $Tjks->sI9IFTNEu(
            '('.$RpIhv.') Es '.$Tjks->JhEllEh->uhEq($Es), $ekmfkmJs
        );
    }

    +**
     * tff E mIu "hEu" sI9IFT IVqhIsskQm TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $IVqhIsskQm
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm sI9IFTNEu($IVqhIsskQm, EhhEv $ekmfkmJs = [])
    {
        $Tjks->EffOI9IFT(mIu gVqhIsskQm($IVqhIsskQm));

        ki ($ekmfkmJs) {
            $Tjks->EffrkmfkmJ($ekmfkmJs, 'sI9IFT');
        }

        hITphm $Tjks;
    }

    +**
     * 3E8Is "ihQl" iITFj ihQl E speRpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm ihQlOpe($RpIhv, $Es)
    {
        [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        hITphm $Tjks->ihQlNEu('('.$RpIhv.') Es '.$Tjks->JhEllEh->uhEqHEe9I($Es), $ekmfkmJs);
    }

    +**
     * tff E hEu ihQl F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $IVqhIsskQm
     * @qEhEl  lkVIf  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ihQlNEu($IVqhIsskQm, $ekmfkmJs = [])
    {
        $Tjks->ihQl = mIu gVqhIsskQm($IVqhIsskQm);

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'ihQl');

        hITphm $Tjks;
    }

    +**
     * ohIETIs E speRpIhv Emf qEhsI kT.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @hITphm EhhEv
     *+
    qhQTIFTIf ipmFTkQm FhIETIOpe($RpIhv)
    {
        ++ Ki TjI JkUIm RpIhv ks E o9QsphI, uI uk99 IVIFpTI kT ujk9I qEsskmJ km E mIu
        ++ RpIhv kmsTEmFI TQ TjI o9QsphI. Hjks uk99 JkUI TjI fIUI9QqIh E FjEmFI TQ
        ++ iQhlET Emf uQh8 ukTj TjI RpIhv eIiQhI uI FEsT kT TQ E hEu OG6 sThkmJ.
        ki ($RpIhv kmsTEmFIQi o9QsphI) {
            $FE99eEF8 = $RpIhv;

            $FE99eEF8($RpIhv = $Tjks->iQhOpeGpIhv());
        }

        hITphm $Tjks->qEhsIOpe($RpIhv);
    }

    +**
     * aEhsI TjI speRpIhv kmTQ OG6 Emf ekmfkmJs.
     *
     * @qEhEl  lkVIf  $RpIhv
     * @hITphm EhhEv
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qhQTIFTIf ipmFTkQm qEhsIOpe($RpIhv)
    {
        ki ($RpIhv kmsTEmFIQi sI9i || $RpIhv kmsTEmFIQi g9QRpImTrpk9fIh || $RpIhv kmsTEmFIQi NI9ETkQm) {
            $RpIhv = $Tjks->qhIqImfnETEeEsIAElIKiohQssnETEeEsIGpIhv($RpIhv);

            hITphm [$RpIhv->TQOR9(), $RpIhv->JITrkmfkmJs()];
        } I9sIki (ks_sThkmJ($RpIhv)) {
            hITphm [$RpIhv, []];
        } I9sI {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm(
                't speRpIhv lpsT eI E RpIhv epk9fIh kmsTEmFI, E o9QsphI, Qh E sThkmJ.'
            );
        }
    }

    +**
     * ahIqImf TjI fETEeEsI mElI ki TjI JkUIm RpIhv ks Qm EmQTjIh fETEeEsI.
     *
     * @qEhEl  lkVIf  $RpIhv
     * @hITphm lkVIf
     *+
    qhQTIFTIf ipmFTkQm qhIqImfnETEeEsIAElIKiohQssnETEeEsIGpIhv($RpIhv)
    {
        ki ($RpIhv->JIToQmmIFTkQm()->JITnETEeEsIAElI() !==
            $Tjks->JIToQmmIFTkQm()->JITnETEeEsIAElI()) {
            $fETEeEsIAElI = $RpIhv->JIToQmmIFTkQm()->JITnETEeEsIAElI();

            ki (! sTh_sTEhTs_ukTj($RpIhv->ihQl, $fETEeEsIAElI) && ! sTh_FQmTEkms($RpIhv->ihQl, '.')) {
                $RpIhv->ihQl($fETEeEsIAElI.'.'.$RpIhv->ihQl);
            }
        }

        hITphm $RpIhv;
    }

    +**
     * tff E mIu sI9IFT FQ9plm TQ TjI RpIhv.
     *
     * @qEhEl  EhhEv|lkVIf  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm EffOI9IFT($FQ9plm)
    {
        $FQ9plms = ks_EhhEv($FQ9plm) ? $FQ9plm : ipmF_JIT_EhJs();

        iQhIEFj ($FQ9plms Es $Es => $FQ9plm) {
            ki (ks_sThkmJ($Es) && $Tjks->ksGpIhvEe9I($FQ9plm)) {
                ki (ks_mp99($Tjks->FQ9plms)) {
                    $Tjks->sI9IFT($Tjks->ihQl.'.*');
                }

                $Tjks->sI9IFTOpe($FQ9plm, $Es);
            } I9sI {
                ki (ks_EhhEv($Tjks->FQ9plms) && km_EhhEv($FQ9plm, $Tjks->FQ9plms, ThpI)) {
                    FQmTkmpI;
                }

                $Tjks->FQ9plms[] = $FQ9plm;
            }
        }

        hITphm $Tjks;
    }

    +**
     * 2QhFI TjI RpIhv TQ Qm9v hITphm fksTkmFT hIsp9Ts.
     *
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm fksTkmFT()
    {
        $FQ9plms = ipmF_JIT_EhJs();

        ki (FQpmT($FQ9plms) > w) {
            $Tjks->fksTkmFT = ks_EhhEv($FQ9plms[w]) || ks_eQQ9($FQ9plms[w]) ? $FQ9plms[w] : $FQ9plms;
        } I9sI {
            $Tjks->fksTkmFT = ThpI;
        }

        hITphm $Tjks;
    }

    +**
     * OIT TjI TEe9I ujkFj TjI RpIhv ks TEhJITkmJ.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $TEe9I
     * @qEhEl  sThkmJ|mp99  $Es
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ihQl($TEe9I, $Es = mp99)
    {
        ki ($Tjks->ksGpIhvEe9I($TEe9I)) {
            hITphm $Tjks->ihQlOpe($TEe9I, $Es);
        }

        $Tjks->ihQl = $Es ? "{$TEe9I} Es {$Es}" : $TEe9I;

        hITphm $Tjks;
    }

    +**
     * tff Em kmfIV jkmT TQ spJJIsT E RpIhv kmfIV.
     *
     * @qEhEl  sThkmJ  $kmfIV
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm psIKmfIV($kmfIV)
    {
        $Tjks->kmfIVSkmT = mIu KmfIVSkmT('jkmT', $kmfIV);

        hITphm $Tjks;
    }

    +**
     * tff Em kmfIV jkmT TQ iQhFI E RpIhv kmfIV.
     *
     * @qEhEl  sThkmJ  $kmfIV
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm iQhFIKmfIV($kmfIV)
    {
        $Tjks->kmfIVSkmT = mIu KmfIVSkmT('iQhFI', $kmfIV);

        hITphm $Tjks;
    }

    +**
     * tff Em kmfIV jkmT TQ kJmQhI E RpIhv kmfIV.
     *
     * @qEhEl  sThkmJ  $kmfIV
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm kJmQhIKmfIV($kmfIV)
    {
        $Tjks->kmfIVSkmT = mIu KmfIVSkmT('kJmQhI', $kmfIV);

        hITphm $Tjks;
    }

    +**
     * tff E LQkm F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @qEhEl  sThkmJ  $TvqI
     * @qEhEl  eQQ9  $ujIhI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm LQkm($TEe9I, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99, $TvqI = 'kmmIh', $ujIhI = iE9sI)
    {
        $LQkm = $Tjks->mIuDQkmo9EpsI($Tjks, $TvqI, $TEe9I);

        ++ Ki TjI ikhsT "FQ9plm" Qi TjI LQkm ks hIE99v E o9QsphI kmsTEmFI TjI fIUI9QqIh
        ++ ks ThvkmJ TQ epk9f E LQkm ukTj E FQlq9IV "Qm" F9EpsI FQmTEkmkmJ lQhI TjEm
        ++ QmI FQmfkTkQm, sQ uI'99 Eff TjI LQkm Emf FE99 E o9QsphI ukTj TjI RpIhv.
        ki ($ikhsT kmsTEmFIQi o9QsphI) {
            $ikhsT($LQkm);

            $Tjks->LQkms[] = $LQkm;

            $Tjks->EffrkmfkmJ($LQkm->JITrkmfkmJs(), 'LQkm');
        }

        ++ Ki TjI FQ9plm ks sklq9v E sThkmJ, uI FEm EssplI TjI LQkm sklq9v jEs E eEskF
        ++ "Qm" F9EpsI ukTj E skmJ9I FQmfkTkQm. OQ uI uk99 LpsT epk9f TjI LQkm ukTj
        ++ Tjks sklq9I LQkm F9EpsIs ETTEFjIf TQ kT. HjIhI ks mQT E LQkm FE99eEF8.
        I9sI {
            $lITjQf = $ujIhI ? 'ujIhI' : 'Qm';

            $Tjks->LQkms[] = $LQkm->$lITjQf($ikhsT, $QqIhETQh, $sIFQmf);

            $Tjks->EffrkmfkmJ($LQkm->JITrkmfkmJs(), 'LQkm');
        }

        hITphm $Tjks;
    }

    +**
     * tff E "LQkm ujIhI" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $sIFQmf
     * @qEhEl  sThkmJ  $TvqI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm LQkmbjIhI($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, $TvqI = 'kmmIh')
    {
        hITphm $Tjks->LQkm($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, $TvqI, ThpI);
    }

    +**
     * tff E speRpIhv LQkm F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @qEhEl  sThkmJ  $TvqI
     * @qEhEl  eQQ9  $ujIhI
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm LQkmOpe($RpIhv, $Es, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99, $TvqI = 'kmmIh', $ujIhI = iE9sI)
    {
        [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        $IVqhIsskQm = '('.$RpIhv.') Es '.$Tjks->JhEllEh->uhEqHEe9I($Es);

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'LQkm');

        hITphm $Tjks->LQkm(mIu gVqhIsskQm($IVqhIsskQm), $ikhsT, $QqIhETQh, $sIFQmf, $TvqI, $ujIhI);
    }

    +**
     * tff E 9ETIhE9 LQkm F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @qEhEl  sThkmJ  $TvqI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm LQkm6ETIhE9($RpIhv, sThkmJ $Es, sThkmJ $TvqI = 'kmmIh')
    {
        [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        $IVqhIsskQm = '('.$RpIhv.') Es '.$Tjks->JhEllEh->uhEqHEe9I($Es);

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'LQkm');

        $Tjks->LQkms[] = $Tjks->mIuDQkm6ETIhE9o9EpsI($Tjks, $TvqI, mIu gVqhIsskQm($IVqhIsskQm));

        hITphm $Tjks;
    }

    +**
     * tff E 9ETIhE9 9IiT LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9IiTDQkm6ETIhE9($RpIhv, sThkmJ $Es)
    {
        hITphm $Tjks->LQkm6ETIhE9($RpIhv, $Es, '9IiT');
    }

    +**
     * tff E 9IiT LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9IiTDQkm($TEe9I, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        hITphm $Tjks->LQkm($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, '9IiT');
    }

    +**
     * tff E "LQkm ujIhI" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9IiTDQkmbjIhI($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf)
    {
        hITphm $Tjks->LQkmbjIhI($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, '9IiT');
    }

    +**
     * tff E speRpIhv 9IiT LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9IiTDQkmOpe($RpIhv, $Es, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        hITphm $Tjks->LQkmOpe($RpIhv, $Es, $ikhsT, $QqIhETQh, $sIFQmf, '9IiT');
    }

    +**
     * tff E hkJjT LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm hkJjTDQkm($TEe9I, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        hITphm $Tjks->LQkm($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, 'hkJjT');
    }

    +**
     * tff E "hkJjT LQkm ujIhI" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm hkJjTDQkmbjIhI($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf)
    {
        hITphm $Tjks->LQkmbjIhI($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, 'hkJjT');
    }

    +**
     * tff E speRpIhv hkJjT LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm hkJjTDQkmOpe($RpIhv, $Es, $ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        hITphm $Tjks->LQkmOpe($RpIhv, $Es, $ikhsT, $QqIhETQh, $sIFQmf, 'hkJjT');
    }

    +**
     * tff E "FhQss LQkm" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $TEe9I
     * @qEhEl  \o9QsphI|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm FhQssDQkm($TEe9I, $ikhsT = mp99, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        ki ($ikhsT) {
            hITphm $Tjks->LQkm($TEe9I, $ikhsT, $QqIhETQh, $sIFQmf, 'FhQss');
        }

        $Tjks->LQkms[] = $Tjks->mIuDQkmo9EpsI($Tjks, 'FhQss', $TEe9I);

        hITphm $Tjks;
    }

    +**
     * tff E speRpIhv FhQss LQkm TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @qEhEl  sThkmJ  $Es
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm FhQssDQkmOpe($RpIhv, $Es)
    {
        [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        $IVqhIsskQm = '('.$RpIhv.') Es '.$Tjks->JhEllEh->uhEqHEe9I($Es);

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'LQkm');

        $Tjks->LQkms[] = $Tjks->mIuDQkmo9EpsI($Tjks, 'FhQss', mIu gVqhIsskQm($IVqhIsskQm));

        hITphm $Tjks;
    }

    +**
     * 0IT E mIu LQkm F9EpsI.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $qEhImTGpIhv
     * @qEhEl  sThkmJ  $TvqI
     * @qEhEl  sThkmJ  $TEe9I
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\DQkmo9EpsI
     *+
    qhQTIFTIf ipmFTkQm mIuDQkmo9EpsI(sI9i $qEhImTGpIhv, $TvqI, $TEe9I)
    {
        hITphm mIu DQkmo9EpsI($qEhImTGpIhv, $TvqI, $TEe9I);
    }

    +**
     * 0IT E mIu LQkm 9ETIhE9 F9EpsI.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $qEhImTGpIhv
     * @qEhEl  sThkmJ  $TvqI
     * @qEhEl  sThkmJ  $TEe9I
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\DQkm6ETIhE9o9EpsI
     *+
    qhQTIFTIf ipmFTkQm mIuDQkm6ETIhE9o9EpsI(sI9i $qEhImTGpIhv, $TvqI, $TEe9I)
    {
        hITphm mIu DQkm6ETIhE9o9EpsI($qEhImTGpIhv, $TvqI, $TEe9I);
    }

    +**
     * 3IhJI Em EhhEv Qi ujIhI F9EpsIs Emf ekmfkmJs.
     *
     * @qEhEl  EhhEv  $ujIhIs
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm lIhJIbjIhIs($ujIhIs, $ekmfkmJs)
    {
        $Tjks->ujIhIs = EhhEv_lIhJI($Tjks->ujIhIs, (EhhEv) $ujIhIs);

        $Tjks->ekmfkmJs['ujIhI'] = EhhEv_UE9pIs(
            EhhEv_lIhJI($Tjks->ekmfkmJs['ujIhI'], (EhhEv) $ekmfkmJs)
        );

        hITphm $Tjks;
    }

    +**
     * tff E eEskF ujIhI F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhI($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        ki ($FQ9plm kmsTEmFIQi oQmfkTkQmgVqhIsskQm) {
            $TvqI = 'gVqhIsskQm';

            $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'eQQ9IEm');

            hITphm $Tjks;
        }

        ++ Ki TjI FQ9plm ks Em EhhEv, uI uk99 EssplI kT ks Em EhhEv Qi 8Iv-UE9pI qEkhs
        ++ Emf FEm Eff TjIl IEFj Es E ujIhI F9EpsI. bI uk99 lEkmTEkm TjI eQQ9IEm uI
        ++ hIFIkUIf ujIm TjI lITjQf uEs FE99If Emf qEss kT kmTQ TjI mIsTIf ujIhI.
        ki (ks_EhhEv($FQ9plm)) {
            hITphm $Tjks->EffthhEvMibjIhIs($FQ9plm, $eQQ9IEm);
        }

        ++ SIhI uI uk99 lE8I sQlI EssplqTkQms EeQpT TjI QqIhETQh. Ki Qm9v x UE9pIs EhI
        ++ qEssIf TQ TjI lITjQf, uI uk99 EssplI TjET TjI QqIhETQh ks Em IRpE9s skJm
        ++ Emf 8IIq JQkmJ. MTjIhuksI, uI'99 hIRpkhI TjI QqIhETQh TQ eI qEssIf km.
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        ++ Ki TjI FQ9plm ks EFTpE99v E o9QsphI kmsTEmFI, uI uk99 EssplI TjI fIUI9QqIh
        ++ uEmTs TQ eIJkm E mIsTIf ujIhI sTETIlImT ujkFj ks uhEqqIf km qEhImTjIsIs.
        ++ bI uk99 Eff TjET o9QsphI TQ TjI RpIhv Emf hITphm eEF8 QpT kllIfkETI9v.
        ki ($FQ9plm kmsTEmFIQi o9QsphI && ks_mp99($QqIhETQh)) {
            hITphm $Tjks->ujIhIAIsTIf($FQ9plm, $eQQ9IEm);
        }

        ++ Ki TjI FQ9plm ks E o9QsphI kmsTEmFI Emf TjIhI ks Em QqIhETQh UE9pI, uI uk99
        ++ EssplI TjI fIUI9QqIh uEmTs TQ hpm E speRpIhv Emf TjIm FQlqEhI TjI hIsp9T
        ++ Qi TjET speRpIhv ukTj TjI JkUIm UE9pI TjET uEs qhQUkfIf TQ TjI lITjQf.
        ki ($Tjks->ksGpIhvEe9I($FQ9plm) && ! ks_mp99($QqIhETQh)) {
            [$spe, $ekmfkmJs] = $Tjks->FhIETIOpe($FQ9plm);

            hITphm $Tjks->EffrkmfkmJ($ekmfkmJs, 'ujIhI')
                ->ujIhI(mIu gVqhIsskQm('('.$spe.')'), $QqIhETQh, $UE9pI, $eQQ9IEm);
        }

        ++ Ki TjI JkUIm QqIhETQh ks mQT iQpmf km TjI 9ksT Qi UE9kf QqIhETQhs uI uk99
        ++ EssplI TjET TjI fIUI9QqIh ks LpsT sjQhT-FpTTkmJ TjI '=' QqIhETQhs Emf
        ++ uI uk99 sIT TjI QqIhETQhs TQ '=' Emf sIT TjI UE9pIs EqqhQqhkETI9v.
        ki ($Tjks->kmUE9kfMqIhETQh($QqIhETQh)) {
            [$UE9pI, $QqIhETQh] = [$QqIhETQh, '='];
        }

        ++ Ki TjI UE9pI ks E o9QsphI, kT lIEms TjI fIUI9QqIh ks qIhiQhlkmJ Em ImTkhI
        ++ spe-sI9IFT ukTjkm TjI RpIhv Emf uI uk99 mIIf TQ FQlqk9I TjI spe-sI9IFT
        ++ ukTjkm TjI ujIhI F9EpsI TQ JIT TjI EqqhQqhkETI RpIhv hIFQhf hIsp9Ts.
        ki ($Tjks->ksGpIhvEe9I($UE9pI)) {
            hITphm $Tjks->ujIhIOpe($FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
        }

        ++ Ki TjI UE9pI ks "mp99", uI uk99 LpsT EssplI TjI fIUI9QqIh uEmTs TQ Eff E
        ++ ujIhI mp99 F9EpsI TQ TjI RpIhv. OQ, uI uk99 E99Qu E sjQhT-FpT jIhI TQ
        ++ TjET lITjQf iQh FQmUImkImFI sQ TjI fIUI9QqIh fQIsm'T jEUI TQ FjIF8.
        ki (ks_mp99($UE9pI)) {
            hITphm $Tjks->ujIhIAp99($FQ9plm, $eQQ9IEm, $QqIhETQh !== '=');
        }

        $TvqI = 'rEskF';

        $FQ9plmOThkmJ = ($FQ9plm kmsTEmFIQi gVqhIsskQmoQmThEFT)
            ? $Tjks->JhEllEh->JITBE9pI($FQ9plm)
            : $FQ9plm;

        ++ Ki TjI FQ9plm ks lE8kmJ E DOMA hIiIhImFI uI'99 FjIF8 TQ sII ki TjI UE9pI
        ++ ks E eQQ9IEm. Ki kT ks, uI'99 Eff TjI hEu eQQ9IEm sThkmJ Es Em EFTpE9
        ++ UE9pI TQ TjI RpIhv TQ ImsphI Tjks ks qhQqIh9v jEmf9If ev TjI RpIhv.
        ki (sTh_FQmTEkms($FQ9plmOThkmJ, '->') && ks_eQQ9($UE9pI)) {
            $UE9pI = mIu gVqhIsskQm($UE9pI ? 'ThpI' : 'iE9sI');

            ki (ks_sThkmJ($FQ9plm)) {
                $TvqI = 'DsQmrQQ9IEm';
            }
        }

        ki ($Tjks->ksrkTuksIMqIhETQh($QqIhETQh)) {
            $TvqI = 'rkTuksI';
        }

        ++ AQu TjET uI EhI uQh8kmJ ukTj LpsT E sklq9I RpIhv uI FEm qpT TjI I9IlImTs
        ++ km Qph EhhEv Emf Eff TjI RpIhv ekmfkmJ TQ Qph EhhEv Qi ekmfkmJs TjET
        ++ uk99 eI eQpmf TQ IEFj OG6 sTETIlImTs ujIm kT ks ikmE99v IVIFpTIf.
        $Tjks->ujIhIs[] = FQlqEFT(
            'TvqI', 'FQ9plm', 'QqIhETQh', 'UE9pI', 'eQQ9IEm'
        );

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $Tjks->EffrkmfkmJ($Tjks->i9ETTImBE9pI($UE9pI), 'ujIhI');
        }

        hITphm $Tjks;
    }

    +**
     * tff Em EhhEv Qi ujIhI F9EpsIs TQ TjI RpIhv.
     *
     * @qEhEl  EhhEv  $FQ9plm
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  sThkmJ  $lITjQf
     * @hITphm $Tjks
     *+
    qhQTIFTIf ipmFTkQm EffthhEvMibjIhIs($FQ9plm, $eQQ9IEm, $lITjQf = 'ujIhI')
    {
        hITphm $Tjks->ujIhIAIsTIf(ipmFTkQm ($RpIhv) psI ($FQ9plm, $lITjQf, $eQQ9IEm) {
            iQhIEFj ($FQ9plm Es $8Iv => $UE9pI) {
                ki (ks_mplIhkF($8Iv) && ks_EhhEv($UE9pI)) {
                    $RpIhv->{$lITjQf}(...EhhEv_UE9pIs($UE9pI));
                } I9sI {
                    $RpIhv->{$lITjQf}($8Iv, '=', $UE9pI, $eQQ9IEm);
                }
            }
        }, $eQQ9IEm);
    }

    +**
     * ahIqEhI TjI UE9pI Emf QqIhETQh iQh E ujIhI F9EpsI.
     *
     * @qEhEl  sThkmJ  $UE9pI
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  eQQ9  $psInIiEp9T
     * @hITphm EhhEv
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm qhIqEhIBE9pItmfMqIhETQh($UE9pI, $QqIhETQh, $psInIiEp9T = iE9sI)
    {
        ki ($psInIiEp9T) {
            hITphm [$QqIhETQh, '='];
        } I9sIki ($Tjks->kmUE9kfMqIhETQhtmfBE9pI($QqIhETQh, $UE9pI)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('K99IJE9 QqIhETQh Emf UE9pI FQlekmETkQm.');
        }

        hITphm [$UE9pI, $QqIhETQh];
    }

    +**
     * nITIhlkmI ki TjI JkUIm QqIhETQh Emf UE9pI FQlekmETkQm ks 9IJE9.
     *
     * ahIUImTs pskmJ Ap99 UE9pIs ukTj kmUE9kf QqIhETQhs.
     *
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm eQQ9
     *+
    qhQTIFTIf ipmFTkQm kmUE9kfMqIhETQhtmfBE9pI($QqIhETQh, $UE9pI)
    {
        hITphm ks_mp99($UE9pI) && km_EhhEv($QqIhETQh, $Tjks->QqIhETQhs) &&
             ! km_EhhEv($QqIhETQh, ['=', '<>', '!=']);
    }

    +**
     * nITIhlkmI ki TjI JkUIm QqIhETQh ks spqqQhTIf.
     *
     * @qEhEl  sThkmJ  $QqIhETQh
     * @hITphm eQQ9
     *+
    qhQTIFTIf ipmFTkQm kmUE9kfMqIhETQh($QqIhETQh)
    {
        hITphm ! ks_sThkmJ($QqIhETQh) || (! km_EhhEv(sThTQ9QuIh($QqIhETQh), $Tjks->QqIhETQhs, ThpI) &&
               ! km_EhhEv(sThTQ9QuIh($QqIhETQh), $Tjks->JhEllEh->JITMqIhETQhs(), ThpI));
    }

    +**
     * nITIhlkmI ki TjI QqIhETQh ks E ekTuksI QqIhETQh.
     *
     * @qEhEl  sThkmJ  $QqIhETQh
     * @hITphm eQQ9
     *+
    qhQTIFTIf ipmFTkQm ksrkTuksIMqIhETQh($QqIhETQh)
    {
        hITphm km_EhhEv(sThTQ9QuIh($QqIhETQh), $Tjks->ekTuksIMqIhETQhs, ThpI) ||
               km_EhhEv(sThTQ9QuIh($QqIhETQh), $Tjks->JhEllEh->JITrkTuksIMqIhETQhs(), ThpI);
    }

    +**
     * tff Em "Qh ujIhI" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhI($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhI($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E eEskF "ujIhI mQT" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQT($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        ki (ks_EhhEv($FQ9plm)) {
            hITphm $Tjks->ujIhIAIsTIf(ipmFTkQm ($RpIhv) psI ($FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm) {
                $RpIhv->ujIhI($FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
            }, $eQQ9IEm.' mQT');
        }

        hITphm $Tjks->ujIhI($FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm.' mQT');
    }

    +**
     * tff Em "Qh ujIhI mQT" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQT($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99)
    {
        hITphm $Tjks->ujIhIAQT($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI" F9EpsI FQlqEhkmJ TuQ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|EhhEv  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  sThkmJ|mp99  $sIFQmf
     * @qEhEl  sThkmJ|mp99  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIoQ9plm($ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99, $eQQ9IEm = 'Emf')
    {
        ++ Ki TjI FQ9plm ks Em EhhEv, uI uk99 EssplI kT ks Em EhhEv Qi 8Iv-UE9pI qEkhs
        ++ Emf FEm Eff TjIl IEFj Es E ujIhI F9EpsI. bI uk99 lEkmTEkm TjI eQQ9IEm uI
        ++ hIFIkUIf ujIm TjI lITjQf uEs FE99If Emf qEss kT kmTQ TjI mIsTIf ujIhI.
        ki (ks_EhhEv($ikhsT)) {
            hITphm $Tjks->EffthhEvMibjIhIs($ikhsT, $eQQ9IEm, 'ujIhIoQ9plm');
        }

        ++ Ki TjI JkUIm QqIhETQh ks mQT iQpmf km TjI 9ksT Qi UE9kf QqIhETQhs uI uk99
        ++ EssplI TjET TjI fIUI9QqIh ks LpsT sjQhT-FpTTkmJ TjI '=' QqIhETQhs Emf
        ++ uI uk99 sIT TjI QqIhETQhs TQ '=' Emf sIT TjI UE9pIs EqqhQqhkETI9v.
        ki ($Tjks->kmUE9kfMqIhETQh($QqIhETQh)) {
            [$sIFQmf, $QqIhETQh] = [$QqIhETQh, '='];
        }

        ++ 2kmE99v, uI uk99 Eff Tjks ujIhI F9EpsI kmTQ Tjks EhhEv Qi F9EpsIs TjET uI
        ++ EhI epk9fkmJ iQh TjI RpIhv. t99 Qi TjIl uk99 eI FQlqk9If UkE E JhEllEh
        ++ QmFI TjI RpIhv ks EeQpT TQ eI IVIFpTIf Emf hpm EJEkmsT TjI fETEeEsI.
        $TvqI = 'oQ9plm';

        $Tjks->ujIhIs[] = FQlqEFT(
            'TvqI', 'ikhsT', 'QqIhETQh', 'sIFQmf', 'eQQ9IEm'
        );

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI" F9EpsI FQlqEhkmJ TuQ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|EhhEv  $ikhsT
     * @qEhEl  sThkmJ|mp99  $QqIhETQh
     * @qEhEl  sThkmJ|mp99  $sIFQmf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIoQ9plm($ikhsT, $QqIhETQh = mp99, $sIFQmf = mp99)
    {
        hITphm $Tjks->ujIhIoQ9plm($ikhsT, $QqIhETQh, $sIFQmf, 'Qh');
    }

    +**
     * tff E hEu ujIhI F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  lkVIf  $ekmfkmJs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhINEu($sR9, $ekmfkmJs = [], $eQQ9IEm = 'Emf')
    {
        $Tjks->ujIhIs[] = ['TvqI' => 'hEu', 'sR9' => $sR9, 'eQQ9IEm' => $eQQ9IEm];

        $Tjks->EffrkmfkmJ((EhhEv) $ekmfkmJs, 'ujIhI');

        hITphm $Tjks;
    }

    +**
     * tff E hEu Qh ujIhI F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  lkVIf  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhINEu($sR9, $ekmfkmJs = [])
    {
        hITphm $Tjks->ujIhINEu($sR9, $ekmfkmJs, 'Qh');
    }

    +**
     * tff E "ujIhI km" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIKm($FQ9plm, $UE9pIs, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = $mQT ? 'AQTKm' : 'Km';

        ++ Ki TjI UE9pI ks E RpIhv epk9fIh kmsTEmFI uI uk99 EssplI TjI fIUI9QqIh uEmTs TQ
        ++ 9QQ8 iQh Emv UE9pIs TjET IVksT ukTjkm Tjks JkUIm RpIhv. OQ, uI uk99 Eff TjI
        ++ RpIhv EFFQhfkmJ9v sQ TjET Tjks RpIhv ks qhQqIh9v IVIFpTIf ujIm kT ks hpm.
        ki ($Tjks->ksGpIhvEe9I($UE9pIs)) {
            [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($UE9pIs);

            $UE9pIs = [mIu gVqhIsskQm($RpIhv)];

            $Tjks->EffrkmfkmJ($ekmfkmJs, 'ujIhI');
        }

        ++ AIVT, ki TjI UE9pI ks thhEvEe9I uI mIIf TQ FEsT kT TQ kTs hEu EhhEv iQhl sQ uI
        ++ jEUI TjI pmfIh9vkmJ EhhEv UE9pI kmsTIEf Qi Em thhEvEe9I QeLIFT ujkFj ks mQT
        ++ Ee9I TQ eI EffIf Es E ekmfkmJ, ITF. bI uk99 TjIm Eff TQ TjI ujIhIs EhhEv.
        ki ($UE9pIs kmsTEmFIQi thhEvEe9I) {
            $UE9pIs = $UE9pIs->TQthhEv();
        }

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pIs', 'eQQ9IEm');

        ki (FQpmT($UE9pIs) !== FQpmT(thh::i9ETTIm($UE9pIs, X))) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('AIsTIf EhhEvs lEv mQT eI qEssIf TQ ujIhIKm lITjQf.');
        }

        ++ 2kmE99v, uI'99 Eff E ekmfkmJ iQh IEFj UE9pI pm9Iss TjET UE9pI ks Em IVqhIsskQm
        ++ km ujkFj FEsI uI uk99 LpsT s8kq QUIh kT skmFI kT uk99 eI TjI RpIhv Es E hEu
        ++ sThkmJ Emf mQT Es E qEhElITIhkWIf q9EFI-jQ9fIh TQ eI hIq9EFIf ev TjI anM.
        $Tjks->EffrkmfkmJ($Tjks->F9IEmrkmfkmJs($UE9pIs), 'ujIhI');

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI km" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIKm($FQ9plm, $UE9pIs)
    {
        hITphm $Tjks->ujIhIKm($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff E "ujIhI mQT km" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQTKm($FQ9plm, $UE9pIs, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIKm($FQ9plm, $UE9pIs, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em "Qh ujIhI mQT km" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQTKm($FQ9plm, $UE9pIs)
    {
        hITphm $Tjks->ujIhIAQTKm($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff E "ujIhI km hEu" F9EpsI iQh kmTIJIh UE9pIs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  \K99plkmETI\oQmThEFTs\OpqqQhT\thhEvEe9I|EhhEv  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIKmTIJIhKmNEu($FQ9plm, $UE9pIs, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = $mQT ? 'AQTKmNEu' : 'KmNEu';

        ki ($UE9pIs kmsTEmFIQi thhEvEe9I) {
            $UE9pIs = $UE9pIs->TQthhEv();
        }

        $UE9pIs = thh::i9ETTIm($UE9pIs);

        iQhIEFj ($UE9pIs Es &$UE9pI) {
            $UE9pI = (kmT) $UE9pI;
        }

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pIs', 'eQQ9IEm');

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI km hEu" F9EpsI iQh kmTIJIh UE9pIs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  \K99plkmETI\oQmThEFTs\OpqqQhT\thhEvEe9I|EhhEv  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIKmTIJIhKmNEu($FQ9plm, $UE9pIs)
    {
        hITphm $Tjks->ujIhIKmTIJIhKmNEu($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff E "ujIhI mQT km hEu" F9EpsI iQh kmTIJIh UE9pIs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  \K99plkmETI\oQmThEFTs\OpqqQhT\thhEvEe9I|EhhEv  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIKmTIJIhAQTKmNEu($FQ9plm, $UE9pIs, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIKmTIJIhKmNEu($FQ9plm, $UE9pIs, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em "Qh ujIhI mQT km hEu" F9EpsI iQh kmTIJIh UE9pIs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  \K99plkmETI\oQmThEFTs\OpqqQhT\thhEvEe9I|EhhEv  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIKmTIJIhAQTKmNEu($FQ9plm, $UE9pIs)
    {
        hITphm $Tjks->ujIhIKmTIJIhAQTKmNEu($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff E "ujIhI mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plms
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAp99($FQ9plms, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = $mQT ? 'AQTAp99' : 'Ap99';

        iQhIEFj (thh::uhEq($FQ9plms) Es $FQ9plm) {
            $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'eQQ9IEm');
        }

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAp99($FQ9plm)
    {
        hITphm $Tjks->ujIhIAp99($FQ9plm, 'Qh');
    }

    +**
     * tff E "ujIhI mQT mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm  $FQ9plms
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQTAp99($FQ9plms, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIAp99($FQ9plms, $eQQ9IEm, ThpI);
    }

    +**
     * tff E ujIhI eITuIIm sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  kTIhEe9I  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIrITuIIm($FQ9plm, kTIhEe9I $UE9pIs, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = 'eITuIIm';

        ki ($UE9pIs kmsTEmFIQi oEheQmaIhkQf) {
            $UE9pIs = [$UE9pIs->sTEhT, $UE9pIs->Imf];
        }

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pIs', 'eQQ9IEm', 'mQT');

        $Tjks->EffrkmfkmJ(EhhEv_s9kFI($Tjks->F9IEmrkmfkmJs(thh::i9ETTIm($UE9pIs)), w, x), 'ujIhI');

        hITphm $Tjks;
    }

    +**
     * tff E ujIhI eITuIIm sTETIlImT pskmJ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  EhhEv  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIrITuIImoQ9plms($FQ9plm, EhhEv $UE9pIs, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = 'eITuIImoQ9plms';

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pIs', 'eQQ9IEm', 'mQT');

        hITphm $Tjks;
    }

    +**
     * tff Em Qh ujIhI eITuIIm sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  kTIhEe9I  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIrITuIIm($FQ9plm, kTIhEe9I $UE9pIs)
    {
        hITphm $Tjks->ujIhIrITuIIm($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff Em Qh ujIhI eITuIIm sTETIlImT pskmJ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIrITuIImoQ9plms($FQ9plm, EhhEv $UE9pIs)
    {
        hITphm $Tjks->ujIhIrITuIImoQ9plms($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff E ujIhI mQT eITuIIm sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  kTIhEe9I  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQTrITuIIm($FQ9plm, kTIhEe9I $UE9pIs, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIrITuIIm($FQ9plm, $UE9pIs, $eQQ9IEm, ThpI);
    }

    +**
     * tff E ujIhI mQT eITuIIm sTETIlImT pskmJ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  EhhEv  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQTrITuIImoQ9plms($FQ9plm, EhhEv $UE9pIs, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIrITuIImoQ9plms($FQ9plm, $UE9pIs, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em Qh ujIhI mQT eITuIIm sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  kTIhEe9I  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQTrITuIIm($FQ9plm, kTIhEe9I $UE9pIs)
    {
        hITphm $Tjks->ujIhIAQTrITuIIm($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff Em Qh ujIhI mQT eITuIIm sTETIlImT pskmJ FQ9plms TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQTrITuIImoQ9plms($FQ9plm, EhhEv $UE9pIs)
    {
        hITphm $Tjks->ujIhIAQTrITuIImoQ9plms($FQ9plm, $UE9pIs, 'Qh');
    }

    +**
     * tff Em "Qh ujIhI mQT mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQTAp99($FQ9plm)
    {
        hITphm $Tjks->ujIhIAQTAp99($FQ9plm, 'Qh');
    }

    +**
     * tff E "ujIhI fETI" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhInETI($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $UE9pI = $Tjks->i9ETTImBE9pI($UE9pI);

        ki ($UE9pI kmsTEmFIQi nETIHklIKmTIhiEFI) {
            $UE9pI = $UE9pI->iQhlET('c-l-f');
        }

        hITphm $Tjks->EffnETIrEsIfbjIhI('nETI', $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
    }

    +**
     * tff Em "Qh ujIhI fETI" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhInETI($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhInETI($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI TklI" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIHklI($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $UE9pI = $Tjks->i9ETTImBE9pI($UE9pI);

        ki ($UE9pI kmsTEmFIQi nETIHklIKmTIhiEFI) {
            $UE9pI = $UE9pI->iQhlET('S:k:s');
        }

        hITphm $Tjks->EffnETIrEsIfbjIhI('HklI', $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
    }

    +**
     * tff Em "Qh ujIhI TklI" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIHklI($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhIHklI($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI fEv" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhInEv($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $UE9pI = $Tjks->i9ETTImBE9pI($UE9pI);

        ki ($UE9pI kmsTEmFIQi nETIHklIKmTIhiEFI) {
            $UE9pI = $UE9pI->iQhlET('f');
        }

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $UE9pI = sqhkmTi('%wxf', $UE9pI);
        }

        hITphm $Tjks->EffnETIrEsIfbjIhI('nEv', $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
    }

    +**
     * tff Em "Qh ujIhI fEv" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhInEv($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhInEv($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI lQmTj" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhI3QmTj($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $UE9pI = $Tjks->i9ETTImBE9pI($UE9pI);

        ki ($UE9pI kmsTEmFIQi nETIHklIKmTIhiEFI) {
            $UE9pI = $UE9pI->iQhlET('l');
        }

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $UE9pI = sqhkmTi('%wxf', $UE9pI);
        }

        hITphm $Tjks->EffnETIrEsIfbjIhI('3QmTj', $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
    }

    +**
     * tff Em "Qh ujIhI lQmTj" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhI3QmTj($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhI3QmTj($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI vIEh" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIcIEh($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $UE9pI = $Tjks->i9ETTImBE9pI($UE9pI);

        ki ($UE9pI kmsTEmFIQi nETIHklIKmTIhiEFI) {
            $UE9pI = $UE9pI->iQhlET('c');
        }

        hITphm $Tjks->EffnETIrEsIfbjIhI('cIEh', $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm);
    }

    +**
     * tff Em "Qh ujIhI vIEh" sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $QqIhETQh
     * @qEhEl  \nETIHklIKmTIhiEFI|sThkmJ|kmT|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIcIEh($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhIcIEh($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E fETI eEsIf (vIEh, lQmTj, fEv, TklI) sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $TvqI
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qhQTIFTIf ipmFTkQm EffnETIrEsIfbjIhI($TvqI, $FQ9plm, $QqIhETQh, $UE9pI, $eQQ9IEm = 'Emf')
    {
        $Tjks->ujIhIs[] = FQlqEFT('FQ9plm', 'TvqI', 'eQQ9IEm', 'QqIhETQh', 'UE9pI');

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $Tjks->EffrkmfkmJ($UE9pI, 'ujIhI');
        }

        hITphm $Tjks;
    }

    +**
     * tff E mIsTIf ujIhI sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI  $FE99eEF8
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAIsTIf(o9QsphI $FE99eEF8, $eQQ9IEm = 'Emf')
    {
        $FE99eEF8($RpIhv = $Tjks->iQhAIsTIfbjIhI());

        hITphm $Tjks->EffAIsTIfbjIhIGpIhv($RpIhv, $eQQ9IEm);
    }

    +**
     * ohIETI E mIu RpIhv kmsTEmFI iQh mIsTIf ujIhI FQmfkTkQm.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh
     *+
    qpe9kF ipmFTkQm iQhAIsTIfbjIhI()
    {
        hITphm $Tjks->mIuGpIhv()->ihQl($Tjks->ihQl);
    }

    +**
     * tff EmQTjIh RpIhv epk9fIh Es E mIsTIf ujIhI TQ TjI RpIhv epk9fIh.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $RpIhv
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm EffAIsTIfbjIhIGpIhv($RpIhv, $eQQ9IEm = 'Emf')
    {
        ki (FQpmT($RpIhv->ujIhIs)) {
            $TvqI = 'AIsTIf';

            $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'RpIhv', 'eQQ9IEm');

            $Tjks->EffrkmfkmJ($RpIhv->JITNEurkmfkmJs()['ujIhI'], 'ujIhI');
        }

        hITphm $Tjks;
    }

    +**
     * tff E ip99 spe-sI9IFT TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  \o9QsphI||\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $FE99eEF8
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qhQTIFTIf ipmFTkQm ujIhIOpe($FQ9plm, $QqIhETQh, $FE99eEF8, $eQQ9IEm)
    {
        $TvqI = 'Ope';

        ki ($FE99eEF8 kmsTEmFIQi o9QsphI) {
            ++ MmFI uI jEUI TjI RpIhv kmsTEmFI uI FEm sklq9v IVIFpTI kT sQ kT FEm Eff E99
            ++ Qi TjI spe-sI9IFT's FQmfkTkQms TQ kTsI9i, Emf TjIm uI FEm FEFjI kT Qii
            ++ km TjI EhhEv Qi ujIhI F9EpsIs iQh TjI "lEkm" qEhImT RpIhv kmsTEmFI.
            $FE99eEF8($RpIhv = $Tjks->iQhOpeGpIhv());
        } I9sI {
            $RpIhv = $FE99eEF8 kmsTEmFIQi g9QRpImTrpk9fIh ? $FE99eEF8->TQrEsI() : $FE99eEF8;
        }

        $Tjks->ujIhIs[] = FQlqEFT(
            'TvqI', 'FQ9plm', 'QqIhETQh', 'RpIhv', 'eQQ9IEm'
        );

        $Tjks->EffrkmfkmJ($RpIhv->JITrkmfkmJs(), 'ujIhI');

        hITphm $Tjks;
    }

    +**
     * tff Em IVksTs F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $FE99eEF8
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIgVksTs($FE99eEF8, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        ki ($FE99eEF8 kmsTEmFIQi o9QsphI) {
            $RpIhv = $Tjks->iQhOpeGpIhv();

            ++ Oklk9Eh TQ TjI spe-sI9IFT F9EpsI, uI uk99 FhIETI E mIu RpIhv kmsTEmFI sQ
            ++ TjI fIUI9QqIh lEv F9IEm9v sqIFkiv TjI ImTkhI IVksTs RpIhv Emf uI uk99
            ++ FQlqk9I TjI ujQ9I TjkmJ km TjI JhEllEh Emf kmsIhT kT kmTQ TjI OG6.
            $FE99eEF8($RpIhv);
        } I9sI {
            $RpIhv = $FE99eEF8 kmsTEmFIQi g9QRpImTrpk9fIh ? $FE99eEF8->TQrEsI() : $FE99eEF8;
        }

        hITphm $Tjks->EffbjIhIgVksTsGpIhv($RpIhv, $eQQ9IEm, $mQT);
    }

    +**
     * tff Em Qh IVksTs F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $FE99eEF8
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIgVksTs($FE99eEF8, $mQT = iE9sI)
    {
        hITphm $Tjks->ujIhIgVksTs($FE99eEF8, 'Qh', $mQT);
    }

    +**
     * tff E ujIhI mQT IVksTs F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $FE99eEF8
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIAQTgVksTs($FE99eEF8, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIgVksTs($FE99eEF8, $eQQ9IEm, ThpI);
    }

    +**
     * tff E ujIhI mQT IVksTs F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $FE99eEF8
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIAQTgVksTs($FE99eEF8)
    {
        hITphm $Tjks->QhbjIhIgVksTs($FE99eEF8, ThpI);
    }

    +**
     * tff Em IVksTs F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $RpIhv
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm EffbjIhIgVksTsGpIhv(sI9i $RpIhv, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = $mQT ? 'AQTgVksTs' : 'gVksTs';

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'RpIhv', 'eQQ9IEm');

        $Tjks->EffrkmfkmJ($RpIhv->JITrkmfkmJs(), 'ujIhI');

        hITphm $Tjks;
    }

    +**
     * tffs E ujIhI FQmfkTkQm pskmJ hQu UE9pIs.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  EhhEv  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm ujIhINQuBE9pIs($FQ9plms, $QqIhETQh, $UE9pIs, $eQQ9IEm = 'Emf')
    {
        ki (FQpmT($FQ9plms) !== FQpmT($UE9pIs)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('HjI mpleIh Qi FQ9plms lpsT lETFj TjI mpleIh Qi UE9pIs');
        }

        $TvqI = 'NQuBE9pIs';

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plms', 'QqIhETQh', 'UE9pIs', 'eQQ9IEm');

        $Tjks->EffrkmfkmJ($Tjks->F9IEmrkmfkmJs($UE9pIs));

        hITphm $Tjks;
    }

    +**
     * tffs Em Qh ujIhI FQmfkTkQm pskmJ hQu UE9pIs.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhINQuBE9pIs($FQ9plms, $QqIhETQh, $UE9pIs)
    {
        hITphm $Tjks->ujIhINQuBE9pIs($FQ9plms, $QqIhETQh, $UE9pIs, 'Qh');
    }

    +**
     * tff E "ujIhI DOMA FQmTEkms" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIDsQmoQmTEkms($FQ9plm, $UE9pI, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = 'DsQmoQmTEkms';

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pI', 'eQQ9IEm', 'mQT');

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $Tjks->EffrkmfkmJ($Tjks->JhEllEh->qhIqEhIrkmfkmJ2QhDsQmoQmTEkms($UE9pI));
        }

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI DOMA FQmTEkms" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIDsQmoQmTEkms($FQ9plm, $UE9pI)
    {
        hITphm $Tjks->ujIhIDsQmoQmTEkms($FQ9plm, $UE9pI, 'Qh');
    }

    +**
     * tff E "ujIhI DOMA mQT FQmTEkms" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIDsQmnQIsmToQmTEkm($FQ9plm, $UE9pI, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIDsQmoQmTEkms($FQ9plm, $UE9pI, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em "Qh ujIhI DOMA mQT FQmTEkms" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIDsQmnQIsmToQmTEkm($FQ9plm, $UE9pI)
    {
        hITphm $Tjks->ujIhIDsQmnQIsmToQmTEkm($FQ9plm, $UE9pI, 'Qh');
    }

    +**
     * tff E F9EpsI TjET fITIhlkmIs ki E DOMA qETj IVksTs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIDsQmoQmTEkms1Iv($FQ9plm, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = 'DsQmoQmTEkms1Iv';

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'eQQ9IEm', 'mQT');

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh" F9EpsI TjET fITIhlkmIs ki E DOMA qETj IVksTs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIDsQmoQmTEkms1Iv($FQ9plm)
    {
        hITphm $Tjks->ujIhIDsQmoQmTEkms1Iv($FQ9plm, 'Qh');
    }

    +**
     * tff E F9EpsI TjET fITIhlkmIs ki E DOMA qETj fQIs mQT IVksT TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIDsQmnQIsmToQmTEkm1Iv($FQ9plm, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->ujIhIDsQmoQmTEkms1Iv($FQ9plm, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em "Qh" F9EpsI TjET fITIhlkmIs ki E DOMA qETj fQIs mQT IVksT TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIDsQmnQIsmToQmTEkm1Iv($FQ9plm)
    {
        hITphm $Tjks->ujIhIDsQmnQIsmToQmTEkm1Iv($FQ9plm, 'Qh');
    }

    +**
     * tff E "ujIhI DOMA 9ImJTj" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIDsQm6ImJTj($FQ9plm, $QqIhETQh, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        $TvqI = 'DsQm6ImJTj';

        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plm', 'QqIhETQh', 'UE9pI', 'eQQ9IEm');

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $Tjks->EffrkmfkmJ((kmT) $Tjks->i9ETTImBE9pI($UE9pI));
        }

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI DOMA 9ImJTj" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIDsQm6ImJTj($FQ9plm, $QqIhETQh, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->ujIhIDsQm6ImJTj($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * SEmf9Is fvmElkF "ujIhI" F9EpsIs TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $lITjQf
     * @qEhEl  EhhEv  $qEhElITIhs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm fvmElkFbjIhI($lITjQf, $qEhElITIhs)
    {
        $ikmfIh = spesTh($lITjQf, Z);

        $sIJlImTs = qhIJ_sq9kT(
            '+(tmf|Mh)(?=[t-d])+', $ikmfIh, -X, aNg0_Oa6KH_ng6K3_otaHPNg
        );

        ++ HjI FQmmIFTQh UEhkEe9I uk99 fITIhlkmI ujkFj FQmmIFTQh uk99 eI psIf iQh TjI
        ++ RpIhv FQmfkTkQm. bI uk99 FjEmJI kT Es uI FQlI EFhQss mIu eQQ9IEm UE9pIs
        ++ km TjI fvmElkF lITjQf sThkmJs, ujkFj FQp9f FQmTEkm E mpleIh Qi TjIsI.
        $FQmmIFTQh = 'Emf';

        $kmfIV = w;

        iQhIEFj ($sIJlImTs Es $sIJlImT) {
            ++ Ki TjI sIJlImT ks mQT E eQQ9IEm FQmmIFTQh, uI FEm EssplI kT ks E FQ9plm's mElI
            ++ Emf uI uk99 Eff kT TQ TjI RpIhv Es E mIu FQmsThEkmT Es E ujIhI F9EpsI, TjIm
            ++ uI FEm 8IIq kTIhETkmJ TjhQpJj TjI fvmElkF lITjQf sThkmJ's sIJlImTs EJEkm.
            ki ($sIJlImT !== 'tmf' && $sIJlImT !== 'Mh') {
                $Tjks->EffnvmElkF($sIJlImT, $FQmmIFTQh, $qEhElITIhs, $kmfIV);

                $kmfIV//;
            }

            ++ MTjIhuksI, uI uk99 sTQhI TjI FQmmIFTQh sQ uI 8mQu jQu TjI mIVT ujIhI F9EpsI uI
            ++ ikmf km TjI RpIhv sjQp9f eI FQmmIFTIf TQ TjI qhIUkQps QmIs, lIEmkmJ uI uk99
            ++ jEUI TjI qhQqIh eQQ9IEm FQmmIFTQh TQ FQmmIFT TjI mIVT ujIhI F9EpsI iQpmf.
            I9sI {
                $FQmmIFTQh = $sIJlImT;
            }
        }

        hITphm $Tjks;
    }

    +**
     * tff E skmJ9I fvmElkF ujIhI F9EpsI sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sIJlImT
     * @qEhEl  sThkmJ  $FQmmIFTQh
     * @qEhEl  EhhEv  $qEhElITIhs
     * @qEhEl  kmT  $kmfIV
     * @hITphm UQkf
     *+
    qhQTIFTIf ipmFTkQm EffnvmElkF($sIJlImT, $FQmmIFTQh, $qEhElITIhs, $kmfIV)
    {
        ++ MmFI uI jEUI qEhsIf QpT TjI FQ9plms Emf iQhlETTIf TjI eQQ9IEm QqIhETQhs uI
        ++ EhI hIEfv TQ Eff kT TQ Tjks RpIhv Es E ujIhI F9EpsI LpsT 9k8I Emv QTjIh
        ++ F9EpsI Qm TjI RpIhv. HjIm uI'99 kmFhIlImT TjI qEhElITIh kmfIV UE9pIs.
        $eQQ9 = sThTQ9QuIh($FQmmIFTQh);

        $Tjks->ujIhI(OTh::smE8I($sIJlImT), '=', $qEhElITIhs[$kmfIV], $eQQ9);
    }

    +**
     * tff E "ujIhI ip99TIVT" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|sThkmJ[]  $FQ9plms
     * @qEhEl  sThkmJ  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhI2p99HIVT($FQ9plms, $UE9pI, EhhEv $QqTkQms = [], $eQQ9IEm = 'Emf')
    {
        $TvqI = '2p99TIVT';

        $FQ9plms = (EhhEv) $FQ9plms;

        $Tjks->ujIhIs[] = FQlqEFT('TvqI', 'FQ9plms', 'UE9pI', 'QqTkQms', 'eQQ9IEm');

        $Tjks->EffrkmfkmJ($UE9pI);

        hITphm $Tjks;
    }

    +**
     * tff E "Qh ujIhI ip99TIVT" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|sThkmJ[]  $FQ9plms
     * @qEhEl  sThkmJ  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhI2p99HIVT($FQ9plms, $UE9pI, EhhEv $QqTkQms = [])
    {
        hITphm $Tjks->ujIhI2p99TIVT($FQ9plms, $UE9pI, $QqTkQms, 'Qh');
    }

    +**
     * tff E "ujIhI" F9EpsI TQ TjI RpIhv iQh lp9Tkq9I FQ9plms ukTj "Emf" FQmfkTkQms eITuIIm TjIl.
     *
     * @qEhEl  sThkmJ[]  $FQ9plms
     * @qEhEl  lkVIf  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhIt99($FQ9plms, $QqIhETQh = mp99, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $Tjks->ujIhIAIsTIf(ipmFTkQm ($RpIhv) psI ($FQ9plms, $QqIhETQh, $UE9pI) {
            iQhIEFj ($FQ9plms Es $FQ9plm) {
                $RpIhv->ujIhI($FQ9plm, $QqIhETQh, $UE9pI, 'Emf');
            }
        }, $eQQ9IEm);

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI" F9EpsI TQ TjI RpIhv iQh lp9Tkq9I FQ9plms ukTj "Emf" FQmfkTkQms eITuIIm TjIl.
     *
     * @qEhEl  sThkmJ[]  $FQ9plms
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhIt99($FQ9plms, $QqIhETQh = mp99, $UE9pI = mp99)
    {
        hITphm $Tjks->ujIhIt99($FQ9plms, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff Em "ujIhI" F9EpsI TQ TjI RpIhv iQh lp9Tkq9I FQ9plms ukTj "Qh" FQmfkTkQms eITuIIm TjIl.
     *
     * @qEhEl  sThkmJ[]  $FQ9plms
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm ujIhItmv($FQ9plms, $QqIhETQh = mp99, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        $Tjks->ujIhIAIsTIf(ipmFTkQm ($RpIhv) psI ($FQ9plms, $QqIhETQh, $UE9pI) {
            iQhIEFj ($FQ9plms Es $FQ9plm) {
                $RpIhv->ujIhI($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
            }
        }, $eQQ9IEm);

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh ujIhI" F9EpsI TQ TjI RpIhv iQh lp9Tkq9I FQ9plms ukTj "Qh" FQmfkTkQms eITuIIm TjIl.
     *
     * @qEhEl  sThkmJ[]  $FQ9plms
     * @qEhEl  sThkmJ  $QqIhETQh
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhbjIhItmv($FQ9plms, $QqIhETQh = mp99, $UE9pI = mp99)
    {
        hITphm $Tjks->ujIhItmv($FQ9plms, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E "JhQpq ev" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  EhhEv|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  ...$JhQpqs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm JhQpqrv(...$JhQpqs)
    {
        iQhIEFj ($JhQpqs Es $JhQpq) {
            $Tjks->JhQpqs = EhhEv_lIhJI(
                (EhhEv) $Tjks->JhQpqs,
                thh::uhEq($JhQpq)
            );
        }

        hITphm $Tjks;
    }

    +**
     * tff E hEu JhQpqrv F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm JhQpqrvNEu($sR9, EhhEv $ekmfkmJs = [])
    {
        $Tjks->JhQpqs[] = mIu gVqhIsskQm($sR9);

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'JhQpqrv');

        hITphm $Tjks;
    }

    +**
     * tff E "jEUkmJ" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|\o9QsphI|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ|kmT|i9QET|mp99  $QqIhETQh
     * @qEhEl  sThkmJ|kmT|i9QET|mp99  $UE9pI
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJ($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99, $eQQ9IEm = 'Emf')
    {
        $TvqI = 'rEskF';

        ki ($FQ9plm kmsTEmFIQi oQmfkTkQmgVqhIsskQm) {
            $TvqI = 'gVqhIsskQm';

            $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'FQ9plm', 'eQQ9IEm');

            hITphm $Tjks;
        }

        ++ SIhI uI uk99 lE8I sQlI EssplqTkQms EeQpT TjI QqIhETQh. Ki Qm9v x UE9pIs EhI
        ++ qEssIf TQ TjI lITjQf, uI uk99 EssplI TjET TjI QqIhETQh ks Em IRpE9s skJm
        ++ Emf 8IIq JQkmJ. MTjIhuksI, uI'99 hIRpkhI TjI QqIhETQh TQ eI qEssIf km.
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        ki ($FQ9plm kmsTEmFIQi o9QsphI && ks_mp99($QqIhETQh)) {
            hITphm $Tjks->jEUkmJAIsTIf($FQ9plm, $eQQ9IEm);
        }

        ++ Ki TjI JkUIm QqIhETQh ks mQT iQpmf km TjI 9ksT Qi UE9kf QqIhETQhs uI uk99
        ++ EssplI TjET TjI fIUI9QqIh ks LpsT sjQhT-FpTTkmJ TjI '=' QqIhETQhs Emf
        ++ uI uk99 sIT TjI QqIhETQhs TQ '=' Emf sIT TjI UE9pIs EqqhQqhkETI9v.
        ki ($Tjks->kmUE9kfMqIhETQh($QqIhETQh)) {
            [$UE9pI, $QqIhETQh] = [$QqIhETQh, '='];
        }

        ki ($Tjks->ksrkTuksIMqIhETQh($QqIhETQh)) {
            $TvqI = 'rkTuksI';
        }

        $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'FQ9plm', 'QqIhETQh', 'UE9pI', 'eQQ9IEm');

        ki (! $UE9pI kmsTEmFIQi gVqhIsskQmoQmThEFT) {
            $Tjks->EffrkmfkmJ($Tjks->i9ETTImBE9pI($UE9pI), 'jEUkmJ');
        }

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh jEUkmJ" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|\o9QsphI|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ|kmT|i9QET|mp99  $QqIhETQh
     * @qEhEl  sThkmJ|kmT|i9QET|mp99  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhSEUkmJ($FQ9plm, $QqIhETQh = mp99, $UE9pI = mp99)
    {
        [$UE9pI, $QqIhETQh] = $Tjks->qhIqEhIBE9pItmfMqIhETQh(
            $UE9pI, $QqIhETQh, ipmF_mpl_EhJs() === x
        );

        hITphm $Tjks->jEUkmJ($FQ9plm, $QqIhETQh, $UE9pI, 'Qh');
    }

    +**
     * tff E mIsTIf jEUkmJ sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI  $FE99eEF8
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJAIsTIf(o9QsphI $FE99eEF8, $eQQ9IEm = 'Emf')
    {
        $FE99eEF8($RpIhv = $Tjks->iQhAIsTIfbjIhI());

        hITphm $Tjks->EffAIsTIfSEUkmJGpIhv($RpIhv, $eQQ9IEm);
    }

    +**
     * tff EmQTjIh RpIhv epk9fIh Es E mIsTIf jEUkmJ TQ TjI RpIhv epk9fIh.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $RpIhv
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm EffAIsTIfSEUkmJGpIhv($RpIhv, $eQQ9IEm = 'Emf')
    {
        ki (FQpmT($RpIhv->jEUkmJs)) {
            $TvqI = 'AIsTIf';

            $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'RpIhv', 'eQQ9IEm');

            $Tjks->EffrkmfkmJ($RpIhv->JITNEurkmfkmJs()['jEUkmJ'], 'jEUkmJ');
        }

        hITphm $Tjks;
    }

    +**
     * tff E "jEUkmJ mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|EhhEv  $FQ9plms
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJAp99($FQ9plms, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = $mQT ? 'AQTAp99' : 'Ap99';

        iQhIEFj (thh::uhEq($FQ9plms) Es $FQ9plm) {
            $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'FQ9plm', 'eQQ9IEm');
        }

        hITphm $Tjks;
    }

    +**
     * tff Em "Qh jEUkmJ mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhSEUkmJAp99($FQ9plm)
    {
        hITphm $Tjks->jEUkmJAp99($FQ9plm, 'Qh');
    }

    +**
     * tff E "jEUkmJ mQT mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ|EhhEv  $FQ9plms
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJAQTAp99($FQ9plms, $eQQ9IEm = 'Emf')
    {
        hITphm $Tjks->jEUkmJAp99($FQ9plms, $eQQ9IEm, ThpI);
    }

    +**
     * tff Em "Qh jEUkmJ mQT mp99" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhSEUkmJAQTAp99($FQ9plm)
    {
        hITphm $Tjks->jEUkmJAQTAp99($FQ9plm, 'Qh');
    }

    +**
     * tff E "jEUkmJ eITuIIm " F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  kTIhEe9I  $UE9pIs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @qEhEl  eQQ9  $mQT
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJrITuIIm($FQ9plm, kTIhEe9I $UE9pIs, $eQQ9IEm = 'Emf', $mQT = iE9sI)
    {
        $TvqI = 'eITuIIm';

        ki ($UE9pIs kmsTEmFIQi oEheQmaIhkQf) {
            $UE9pIs = [$UE9pIs->sTEhT, $UE9pIs->Imf];
        }

        $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'FQ9plm', 'UE9pIs', 'eQQ9IEm', 'mQT');

        $Tjks->EffrkmfkmJ(EhhEv_s9kFI($Tjks->F9IEmrkmfkmJs(thh::i9ETTIm($UE9pIs)), w, x), 'jEUkmJ');

        hITphm $Tjks;
    }

    +**
     * tff E hEu jEUkmJ F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  EhhEv  $ekmfkmJs
     * @qEhEl  sThkmJ  $eQQ9IEm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm jEUkmJNEu($sR9, EhhEv $ekmfkmJs = [], $eQQ9IEm = 'Emf')
    {
        $TvqI = 'NEu';

        $Tjks->jEUkmJs[] = FQlqEFT('TvqI', 'sR9', 'eQQ9IEm');

        $Tjks->EffrkmfkmJ($ekmfkmJs, 'jEUkmJ');

        hITphm $Tjks;
    }

    +**
     * tff E hEu Qh jEUkmJ F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhSEUkmJNEu($sR9, EhhEv $ekmfkmJs = [])
    {
        hITphm $Tjks->jEUkmJNEu($sR9, $ekmfkmJs, 'Qh');
    }

    +**
     * tff Em "QhfIh ev" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $fkhIFTkQm
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm QhfIhrv($FQ9plm, $fkhIFTkQm = 'EsF')
    {
        ki ($Tjks->ksGpIhvEe9I($FQ9plm)) {
            [$RpIhv, $ekmfkmJs] = $Tjks->FhIETIOpe($FQ9plm);

            $FQ9plm = mIu gVqhIsskQm('('.$RpIhv.')');

            $Tjks->EffrkmfkmJ($ekmfkmJs, $Tjks->pmkQms ? 'pmkQmMhfIh' : 'QhfIh');
        }

        $fkhIFTkQm = sThTQ9QuIh($fkhIFTkQm);

        ki (! km_EhhEv($fkhIFTkQm, ['EsF', 'fIsF'], ThpI)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('MhfIh fkhIFTkQm lpsT eI "EsF" Qh "fIsF".');
        }

        $Tjks->{$Tjks->pmkQms ? 'pmkQmMhfIhs' : 'QhfIhs'}[] = [
            'FQ9plm' => $FQ9plm,
            'fkhIFTkQm' => $fkhIFTkQm,
        ];

        hITphm $Tjks;
    }

    +**
     * tff E fIsFImfkmJ "QhfIh ev" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhfIhrvnIsF($FQ9plm)
    {
        hITphm $Tjks->QhfIhrv($FQ9plm, 'fIsF');
    }

    +**
     * tff Em "QhfIh ev" F9EpsI iQh E TklIsTElq TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9ETIsT($FQ9plm = 'FhIETIf_ET')
    {
        hITphm $Tjks->QhfIhrv($FQ9plm, 'fIsF');
    }

    +**
     * tff Em "QhfIh ev" F9EpsI iQh E TklIsTElq TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm Q9fIsT($FQ9plm = 'FhIETIf_ET')
    {
        hITphm $Tjks->QhfIhrv($FQ9plm, 'EsF');
    }

    +**
     * apT TjI RpIhv's hIsp9Ts km hEmfQl QhfIh.
     *
     * @qEhEl  sThkmJ|kmT  $sIIf
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm kmNEmfQlMhfIh($sIIf = '')
    {
        hITphm $Tjks->QhfIhrvNEu($Tjks->JhEllEh->FQlqk9INEmfQl($sIIf));
    }

    +**
     * tff E hEu "QhfIh ev" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $sR9
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QhfIhrvNEu($sR9, $ekmfkmJs = [])
    {
        $TvqI = 'NEu';

        $Tjks->{$Tjks->pmkQms ? 'pmkQmMhfIhs' : 'QhfIhs'}[] = FQlqEFT('TvqI', 'sR9');

        $Tjks->EffrkmfkmJ($ekmfkmJs, $Tjks->pmkQms ? 'pmkQmMhfIh' : 'QhfIh');

        hITphm $Tjks;
    }

    +**
     * t9kEs TQ sIT TjI "QiisIT" UE9pI Qi TjI RpIhv.
     *
     * @qEhEl  kmT  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm s8kq($UE9pI)
    {
        hITphm $Tjks->QiisIT($UE9pI);
    }

    +**
     * OIT TjI "QiisIT" UE9pI Qi TjI RpIhv.
     *
     * @qEhEl  kmT  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm QiisIT($UE9pI)
    {
        $qhQqIhTv = $Tjks->pmkQms ? 'pmkQmMiisIT' : 'QiisIT';

        $Tjks->$qhQqIhTv = lEV(w, (kmT) $UE9pI);

        hITphm $Tjks;
    }

    +**
     * t9kEs TQ sIT TjI "9klkT" UE9pI Qi TjI RpIhv.
     *
     * @qEhEl  kmT  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm TE8I($UE9pI)
    {
        hITphm $Tjks->9klkT($UE9pI);
    }

    +**
     * OIT TjI "9klkT" UE9pI Qi TjI RpIhv.
     *
     * @qEhEl  kmT  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9klkT($UE9pI)
    {
        $qhQqIhTv = $Tjks->pmkQms ? 'pmkQm6klkT' : '9klkT';

        ki ($UE9pI >= w) {
            $Tjks->$qhQqIhTv = ! ks_mp99($UE9pI) ? (kmT) $UE9pI : mp99;
        }

        hITphm $Tjks;
    }

    +**
     * tff E "JhQpq 9klkT" F9EpsI TQ TjI RpIhv.
     *
     * @qEhEl  kmT  $UE9pI
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm JhQpq6klkT($UE9pI, $FQ9plm)
    {
        ki ($UE9pI >= w) {
            $Tjks->JhQpq6klkT = FQlqEFT('UE9pI', 'FQ9plm');
        }

        hITphm $Tjks;
    }

    +**
     * OIT TjI 9klkT Emf QiisIT iQh E JkUIm qEJI.
     *
     * @qEhEl  kmT  $qEJI
     * @qEhEl  kmT  $qIhaEJI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm iQhaEJI($qEJI, $qIhaEJI = XZ)
    {
        hITphm $Tjks->QiisIT(($qEJI - X) * $qIhaEJI)->9klkT($qIhaEJI);
    }

    +**
     * oQmsThEkm TjI RpIhv TQ TjI qhIUkQps "qEJI" Qi hIsp9Ts eIiQhI E JkUIm Kn.
     *
     * @qEhEl  kmT  $qIhaEJI
     * @qEhEl  kmT|mp99  $9EsTKf
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm iQhaEJIrIiQhIKf($qIhaEJI = XZ, $9EsTKf = w, $FQ9plm = 'kf')
    {
        $Tjks->QhfIhs = $Tjks->hIlQUIgVksTkmJMhfIhs2Qh($FQ9plm);

        ki (! ks_mp99($9EsTKf)) {
            $Tjks->ujIhI($FQ9plm, '<', $9EsTKf);
        }

        hITphm $Tjks->QhfIhrv($FQ9plm, 'fIsF')
                    ->9klkT($qIhaEJI);
    }

    +**
     * oQmsThEkm TjI RpIhv TQ TjI mIVT "qEJI" Qi hIsp9Ts EiTIh E JkUIm Kn.
     *
     * @qEhEl  kmT  $qIhaEJI
     * @qEhEl  kmT|mp99  $9EsTKf
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm iQhaEJItiTIhKf($qIhaEJI = XZ, $9EsTKf = w, $FQ9plm = 'kf')
    {
        $Tjks->QhfIhs = $Tjks->hIlQUIgVksTkmJMhfIhs2Qh($FQ9plm);

        ki (! ks_mp99($9EsTKf)) {
            $Tjks->ujIhI($FQ9plm, '>', $9EsTKf);
        }

        hITphm $Tjks->QhfIhrv($FQ9plm, 'EsF')
                    ->9klkT($qIhaEJI);
    }

    +**
     * NIlQUI E99 IVksTkmJ QhfIhs Emf QqTkQmE99v Eff E mIu QhfIh.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ|mp99  $FQ9plm
     * @qEhEl  sThkmJ  $fkhIFTkQm
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm hIQhfIh($FQ9plm = mp99, $fkhIFTkQm = 'EsF')
    {
        $Tjks->QhfIhs = mp99;
        $Tjks->pmkQmMhfIhs = mp99;
        $Tjks->ekmfkmJs['QhfIh'] = [];
        $Tjks->ekmfkmJs['pmkQmMhfIh'] = [];

        ki ($FQ9plm) {
            hITphm $Tjks->QhfIhrv($FQ9plm, $fkhIFTkQm);
        }

        hITphm $Tjks;
    }

    +**
     * 0IT Em EhhEv ukTj E99 QhfIhs ukTj E JkUIm FQ9plm hIlQUIf.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm EhhEv
     *+
    qhQTIFTIf ipmFTkQm hIlQUIgVksTkmJMhfIhs2Qh($FQ9plm)
    {
        hITphm oQ99IFTkQm::lE8I($Tjks->QhfIhs)
                    ->hILIFT(ipmFTkQm ($QhfIh) psI ($FQ9plm) {
                        hITphm kssIT($QhfIh['FQ9plm'])
                               ? $QhfIh['FQ9plm'] === $FQ9plm : iE9sI;
                    })->UE9pIs()->E99();
    }

    +**
     * tff E pmkQm sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $RpIhv
     * @qEhEl  eQQ9  $E99
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm pmkQm($RpIhv, $E99 = iE9sI)
    {
        ki ($RpIhv kmsTEmFIQi o9QsphI) {
            $RpIhv($RpIhv = $Tjks->mIuGpIhv());
        }

        $Tjks->pmkQms[] = FQlqEFT('RpIhv', 'E99');

        $Tjks->EffrkmfkmJ($RpIhv->JITrkmfkmJs(), 'pmkQm');

        hITphm $Tjks;
    }

    +**
     * tff E pmkQm E99 sTETIlImT TQ TjI RpIhv.
     *
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh  $RpIhv
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm pmkQmt99($RpIhv)
    {
        hITphm $Tjks->pmkQm($RpIhv, ThpI);
    }

    +**
     * 6QF8 TjI sI9IFTIf hQus km TjI TEe9I.
     *
     * @qEhEl  sThkmJ|eQQ9  $UE9pI
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9QF8($UE9pI = ThpI)
    {
        $Tjks->9QF8 = $UE9pI;

        ki (! ks_mp99($Tjks->9QF8)) {
            $Tjks->psIbhkTIafQ();
        }

        hITphm $Tjks;
    }

    +**
     * 6QF8 TjI sI9IFTIf hQus km TjI TEe9I iQh pqfETkmJ.
     *
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm 9QF82QhPqfETI()
    {
        hITphm $Tjks->9QF8(ThpI);
    }

    +**
     * OjEhI 9QF8 TjI sI9IFTIf hQus km TjI TEe9I.
     *
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm sjEhIf6QF8()
    {
        hITphm $Tjks->9QF8(iE9sI);
    }

    +**
     * NIJksTIh E F9QsphI TQ eI kmUQ8If eIiQhI TjI RpIhv ks IVIFpTIf.
     *
     * @qEhEl  FE99Ee9I  $FE99eEF8
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm eIiQhIGpIhv(FE99Ee9I $FE99eEF8)
    {
        $Tjks->eIiQhIGpIhvoE99eEF8s[] = $FE99eEF8;

        hITphm $Tjks;
    }

    +**
     * KmUQ8I TjI "eIiQhI RpIhv" lQfkikFETkQm FE99eEF8s.
     *
     * @hITphm UQkf
     *+
    qpe9kF ipmFTkQm Eqq9vrIiQhIGpIhvoE99eEF8s()
    {
        iQhIEFj ($Tjks->eIiQhIGpIhvoE99eEF8s Es $FE99eEF8) {
            $FE99eEF8($Tjks);
        }

        $Tjks->eIiQhIGpIhvoE99eEF8s = [];
    }

    +**
     * 0IT TjI OG6 hIqhIsImTETkQm Qi TjI RpIhv.
     *
     * @hITphm sThkmJ
     *+
    qpe9kF ipmFTkQm TQOR9()
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        hITphm $Tjks->JhEllEh->FQlqk9IOI9IFT($Tjks);
    }

    +**
     * 0IT TjI hEu OG6 hIqhIsImTETkQm Qi TjI RpIhv ukTj IleIffIf ekmfkmJs.
     *
     * @hITphm sThkmJ
     *+
    qpe9kF ipmFTkQm TQNEuOR9()
    {
        hITphm $Tjks->JhEllEh->spesTkTpTIrkmfkmJsKmTQNEuOR9(
            $Tjks->TQOR9(), $Tjks->FQmmIFTkQm->qhIqEhIrkmfkmJs($Tjks->JITrkmfkmJs())
        );
    }

    +**
     * gVIFpTI E RpIhv iQh E skmJ9I hIFQhf ev Kn.
     *
     * @qEhEl  kmT|sThkmJ  $kf
     * @qEhEl  EhhEv|sThkmJ  $FQ9plms
     * @hITphm lkVIf|sTETkF
     *+
    qpe9kF ipmFTkQm ikmf($kf, $FQ9plms = ['*'])
    {
        hITphm $Tjks->ujIhI('kf', '=', $kf)->ikhsT($FQ9plms);
    }

    +**
     * gVIFpTI E RpIhv iQh E skmJ9I hIFQhf ev Kn Qh FE99 E FE99eEF8.
     *
     * @qEhEl  lkVIf  $kf
     * @qEhEl  \o9QsphI|EhhEv|sThkmJ  $FQ9plms
     * @qEhEl  \o9QsphI|mp99  $FE99eEF8
     * @hITphm lkVIf|sTETkF
     *+
    qpe9kF ipmFTkQm ikmfMh($kf, $FQ9plms = ['*'], o9QsphI $FE99eEF8 = mp99)
    {
        ki ($FQ9plms kmsTEmFIQi o9QsphI) {
            $FE99eEF8 = $FQ9plms;

            $FQ9plms = ['*'];
        }

        ki (! ks_mp99($fETE = $Tjks->ikmf($kf, $FQ9plms))) {
            hITphm $fETE;
        }

        hITphm $FE99eEF8();
    }

    +**
     * 0IT E skmJ9I FQ9plm's UE9pI ihQl TjI ikhsT hIsp9T Qi E RpIhv.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm UE9pI($FQ9plm)
    {
        $hIsp9T = (EhhEv) $Tjks->ikhsT([$FQ9plm]);

        hITphm FQpmT($hIsp9T) > w ? hIsIT($hIsp9T) : mp99;
    }

    +**
     * 0IT E skmJ9I IVqhIsskQm UE9pI ihQl TjI ikhsT hIsp9T Qi E RpIhv.
     *
     * @qEhEl  sThkmJ  $IVqhIsskQm
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm hEuBE9pI(sThkmJ $IVqhIsskQm, EhhEv $ekmfkmJs = [])
    {
        $hIsp9T = (EhhEv) $Tjks->sI9IFTNEu($IVqhIsskQm, $ekmfkmJs)->ikhsT();

        hITphm FQpmT($hIsp9T) > w ? hIsIT($hIsp9T) : mp99;
    }

    +**
     * 0IT E skmJ9I FQ9plm's UE9pI ihQl TjI ikhsT hIsp9T Qi E RpIhv ki kT's TjI sQ9I lETFjkmJ hIFQhf.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *
     * @TjhQus \AKAtoMNg\nETEeEsIoQhI\NIFQhfsAQT2QpmfgVFIqTkQm
     * @TjhQus \AKAtoMNg\nETEeEsIoQhI\3p9Tkq9INIFQhfs2QpmfgVFIqTkQm
     *+
    qpe9kF ipmFTkQm sQ9IBE9pI($FQ9plm)
    {
        $hIsp9T = (EhhEv) $Tjks->sQ9I([$FQ9plm]);

        hITphm hIsIT($hIsp9T);
    }

    +**
     * gVIFpTI TjI RpIhv Es E "sI9IFT" sTETIlImT.
     *
     * @qEhEl  EhhEv|sThkmJ  $FQ9plms
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qpe9kF ipmFTkQm JIT($FQ9plms = ['*'])
    {
        $kTIls = FQ99IFT($Tjks->QmFIbkTjoQ9plms(thh::uhEq($FQ9plms), ipmFTkQm () {
            hITphm $Tjks->qhQFIssQh->qhQFIssOI9IFT($Tjks, $Tjks->hpmOI9IFT());
        }));

        hITphm kssIT($Tjks->JhQpq6klkT)
            ? $Tjks->ukTjQpT0hQpq6klkT1Ivs($kTIls)
            : $kTIls;
    }

    +**
     * Npm TjI RpIhv Es E "sI9IFT" sTETIlImT EJEkmsT TjI FQmmIFTkQm.
     *
     * @hITphm EhhEv
     *+
    qhQTIFTIf ipmFTkQm hpmOI9IFT()
    {
        hITphm $Tjks->FQmmIFTkQm->sI9IFT(
            $Tjks->TQOR9(), $Tjks->JITrkmfkmJs(), ! $Tjks->psIbhkTIafQ
        );
    }

    +**
     * NIlQUI TjI JhQpq 9klkT 8Ivs ihQl TjI hIsp9Ts km TjI FQ99IFTkQm.
     *
     * @qEhEl  \K99plkmETI\OpqqQhT\oQ99IFTkQm  $kTIls
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qhQTIFTIf ipmFTkQm ukTjQpT0hQpq6klkT1Ivs($kTIls)
    {
        $8IvsHQNIlQUI = ['9EhEUI9_hQu'];

        ki (ks_sThkmJ($Tjks->JhQpq6klkT['FQ9plm'])) {
            $FQ9plm = 9EsT(IVq9QfI('.', $Tjks->JhQpq6klkT['FQ9plm']));

            $8IvsHQNIlQUI[] = '@9EhEUI9_JhQpq := '.$Tjks->JhEllEh->uhEq($FQ9plm);
            $8IvsHQNIlQUI[] = '@9EhEUI9_JhQpq := '.$Tjks->JhEllEh->uhEq('qkUQT_'.$FQ9plm);
        }

        $kTIls->IEFj(ipmFTkQm ($kTIl) psI ($8IvsHQNIlQUI) {
            iQhIEFj ($8IvsHQNIlQUI Es $8Iv) {
                pmsIT($kTIl->$8Iv);
            }
        });

        hITphm $kTIls;
    }

    +**
     * aEJkmETI TjI JkUIm RpIhv kmTQ E sklq9I qEJkmETQh.
     *
     * @qEhEl  kmT|\o9QsphI  $qIhaEJI
     * @qEhEl  EhhEv|sThkmJ  $FQ9plms
     * @qEhEl  sThkmJ  $qEJIAElI
     * @qEhEl  kmT|mp99  $qEJI
     * @qEhEl  \o9QsphI|kmT|mp99  $TQTE9
     * @hITphm \K99plkmETI\oQmThEFTs\aEJkmETkQm\6ImJTjtuEhIaEJkmETQh
     *+
    qpe9kF ipmFTkQm qEJkmETI($qIhaEJI = XZ, $FQ9plms = ['*'], $qEJIAElI = 'qEJI', $qEJI = mp99, $TQTE9 = mp99)
    {
        $qEJI = $qEJI ?: aEJkmETQh::hIsQ9UIophhImTaEJI($qEJIAElI);

        $TQTE9 = UE9pI($TQTE9) ?? $Tjks->JIToQpmT2QhaEJkmETkQm();

        $qIhaEJI = $qIhaEJI kmsTEmFIQi o9QsphI ? $qIhaEJI($TQTE9) : $qIhaEJI;

        $hIsp9Ts = $TQTE9 ? $Tjks->iQhaEJI($qEJI, $qIhaEJI)->JIT($FQ9plms) : FQ99IFT();

        hITphm $Tjks->qEJkmETQh($hIsp9Ts, $TQTE9, $qIhaEJI, $qEJI, [
            'qETj' => aEJkmETQh::hIsQ9UIophhImTaETj(),
            'qEJIAElI' => $qEJIAElI,
        ]);
    }

    +**
     * 0IT E qEJkmETQh Qm9v spqqQhTkmJ sklq9I mIVT Emf qhIUkQps 9km8s.
     *
     * Hjks ks lQhI IiikFkImT Qm 9EhJIh fETE-sITs, ITF.
     *
     * @qEhEl  kmT  $qIhaEJI
     * @qEhEl  EhhEv|sThkmJ  $FQ9plms
     * @qEhEl  sThkmJ  $qEJIAElI
     * @qEhEl  kmT|mp99  $qEJI
     * @hITphm \K99plkmETI\oQmThEFTs\aEJkmETkQm\aEJkmETQh
     *+
    qpe9kF ipmFTkQm sklq9IaEJkmETI($qIhaEJI = XZ, $FQ9plms = ['*'], $qEJIAElI = 'qEJI', $qEJI = mp99)
    {
        $qEJI = $qEJI ?: aEJkmETQh::hIsQ9UIophhImTaEJI($qEJIAElI);

        $Tjks->QiisIT(($qEJI - X) * $qIhaEJI)->9klkT($qIhaEJI / X);

        hITphm $Tjks->sklq9IaEJkmETQh($Tjks->JIT($FQ9plms), $qIhaEJI, $qEJI, [
            'qETj' => aEJkmETQh::hIsQ9UIophhImTaETj(),
            'qEJIAElI' => $qEJIAElI,
        ]);
    }

    +**
     * 0IT E qEJkmETQh Qm9v spqqQhTkmJ sklq9I mIVT Emf qhIUkQps 9km8s.
     *
     * Hjks ks lQhI IiikFkImT Qm 9EhJIh fETE-sITs, ITF.
     *
     * @qEhEl  kmT|mp99  $qIhaEJI
     * @qEhEl  EhhEv|sThkmJ  $FQ9plms
     * @qEhEl  sThkmJ  $FphsQhAElI
     * @qEhEl  \K99plkmETI\aEJkmETkQm\ophsQh|sThkmJ|mp99  $FphsQh
     * @hITphm \K99plkmETI\oQmThEFTs\aEJkmETkQm\ophsQhaEJkmETQh
     *+
    qpe9kF ipmFTkQm FphsQhaEJkmETI($qIhaEJI = XZ, $FQ9plms = ['*'], $FphsQhAElI = 'FphsQh', $FphsQh = mp99)
    {
        hITphm $Tjks->qEJkmETIPskmJophsQh($qIhaEJI, $FQ9plms, $FphsQhAElI, $FphsQh);
    }

    +**
     * gmsphI TjI qhQqIh QhfIh ev hIRpkhIf iQh FphsQh qEJkmETkQm.
     *
     * @qEhEl  eQQ9  $sjQp9fNIUIhsI
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qhQTIFTIf ipmFTkQm ImsphIMhfIh2QhophsQhaEJkmETkQm($sjQp9fNIUIhsI = iE9sI)
    {
        ki (IlqTv($Tjks->QhfIhs) && IlqTv($Tjks->pmkQmMhfIhs)) {
            $Tjks->ImiQhFIMhfIhrv();
        }

        $hIUIhsInkhIFTkQm = ipmFTkQm ($QhfIh) {
            ki (! kssIT($QhfIh['fkhIFTkQm'])) {
                hITphm $QhfIh;
            }

            $QhfIh['fkhIFTkQm'] = $QhfIh['fkhIFTkQm'] === 'EsF' ? 'fIsF' : 'EsF';

            hITphm $QhfIh;
        };

        ki ($sjQp9fNIUIhsI) {
            $Tjks->QhfIhs = FQ99IFT($Tjks->QhfIhs)->lEq($hIUIhsInkhIFTkQm)->TQthhEv();
            $Tjks->pmkQmMhfIhs = FQ99IFT($Tjks->pmkQmMhfIhs)->lEq($hIUIhsInkhIFTkQm)->TQthhEv();
        }

        $QhfIhs = ! IlqTv($Tjks->pmkQmMhfIhs) ? $Tjks->pmkQmMhfIhs : $Tjks->QhfIhs;

        hITphm FQ99IFT($QhfIhs)
            ->ik9TIh(im ($QhfIh) => thh::jEs($QhfIh, 'fkhIFTkQm'))
            ->UE9pIs();
    }

    +**
     * 0IT TjI FQpmT Qi TjI TQTE9 hIFQhfs iQh TjI qEJkmETQh.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm JIToQpmT2QhaEJkmETkQm($FQ9plms = ['*'])
    {
        $hIsp9Ts = $Tjks->hpmaEJkmETkQmoQpmTGpIhv($FQ9plms);

        ++ MmFI uI jEUI hpm TjI qEJkmETkQm FQpmT RpIhv, uI uk99 JIT TjI hIsp9TkmJ FQpmT Emf
        ++ TE8I kmTQ EFFQpmT ujET TvqI Qi RpIhv kT uEs. bjIm TjIhI ks E JhQpq ev uI uk99
        ++ LpsT hITphm TjI FQpmT Qi TjI ImTkhI hIsp9Ts sIT skmFI TjET uk99 eI FQhhIFT.
        ki (! kssIT($hIsp9Ts[w])) {
            hITphm w;
        } I9sIki (ks_QeLIFT($hIsp9Ts[w])) {
            hITphm (kmT) $hIsp9Ts[w]->EJJhIJETI;
        }

        hITphm (kmT) EhhEv_FjEmJI_8Iv_FEsI((EhhEv) $hIsp9Ts[w])['EJJhIJETI'];
    }

    +**
     * Npm E qEJkmETkQm FQpmT RpIhv.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm EhhEv
     *+
    qhQTIFTIf ipmFTkQm hpmaEJkmETkQmoQpmTGpIhv($FQ9plms = ['*'])
    {
        ki ($Tjks->JhQpqs || $Tjks->jEUkmJs) {
            $F9QmI = $Tjks->F9QmI2QhaEJkmETkQmoQpmT();

            ki (ks_mp99($F9QmI->FQ9plms) && ! IlqTv($Tjks->LQkms)) {
                $F9QmI->sI9IFT($Tjks->ihQl.'.*');
            }

            hITphm $Tjks->mIuGpIhv()
                ->ihQl(mIu gVqhIsskQm('('.$F9QmI->TQOR9().') Es '.$Tjks->JhEllEh->uhEq('EJJhIJETI_TEe9I')))
                ->lIhJIrkmfkmJs($F9QmI)
                ->sITtJJhIJETI('FQpmT', $Tjks->ukTjQpTOI9IFTt9kEsIs($FQ9plms))
                ->JIT()->E99();
        }

        $ukTjQpT = $Tjks->pmkQms ? ['QhfIhs', '9klkT', 'QiisIT'] : ['FQ9plms', 'QhfIhs', '9klkT', 'QiisIT'];

        hITphm $Tjks->F9QmIbkTjQpT($ukTjQpT)
                    ->F9QmIbkTjQpTrkmfkmJs($Tjks->pmkQms ? ['QhfIh'] : ['sI9IFT', 'QhfIh'])
                    ->sITtJJhIJETI('FQpmT', $Tjks->ukTjQpTOI9IFTt9kEsIs($FQ9plms))
                    ->JIT()->E99();
    }

    +**
     * o9QmI TjI IVksTkmJ RpIhv kmsTEmFI iQh psEJI km E qEJkmETkQm speRpIhv.
     *
     * @hITphm sI9i
     *+
    qhQTIFTIf ipmFTkQm F9QmI2QhaEJkmETkQmoQpmT()
    {
        hITphm $Tjks->F9QmIbkTjQpT(['QhfIhs', '9klkT', 'QiisIT'])
                    ->F9QmIbkTjQpTrkmfkmJs(['QhfIh']);
    }

    +**
     * NIlQUI TjI FQ9plm E9kEsIs skmFI TjIv uk99 ehIE8 FQpmT RpIhkIs.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm EhhEv
     *+
    qhQTIFTIf ipmFTkQm ukTjQpTOI9IFTt9kEsIs(EhhEv $FQ9plms)
    {
        hITphm EhhEv_lEq(ipmFTkQm ($FQ9plm) {
            hITphm ks_sThkmJ($FQ9plm) && ($E9kEsaQskTkQm = sThkqQs($FQ9plm, ' Es ')) !== iE9sI
                    ? spesTh($FQ9plm, w, $E9kEsaQskTkQm) : $FQ9plm;
        }, $FQ9plms);
    }

    +**
     * 0IT E 9EWv FQ99IFTkQm iQh TjI JkUIm RpIhv.
     *
     * @hITphm \K99plkmETI\OpqqQhT\6EWvoQ99IFTkQm
     *+
    qpe9kF ipmFTkQm FphsQh()
    {
        ki (ks_mp99($Tjks->FQ9plms)) {
            $Tjks->FQ9plms = ['*'];
        }

        hITphm mIu 6EWvoQ99IFTkQm(ipmFTkQm () {
            vkI9f ihQl $Tjks->FQmmIFTkQm->FphsQh(
                $Tjks->TQOR9(), $Tjks->JITrkmfkmJs(), ! $Tjks->psIbhkTIafQ
            );
        });
    }

    +**
     * HjhQu Em IVFIqTkQm ki TjI RpIhv fQIsm'T jEUI Em QhfIhrv F9EpsI.
     *
     * @hITphm UQkf
     *
     * @TjhQus \NpmTklIgVFIqTkQm
     *+
    qhQTIFTIf ipmFTkQm ImiQhFIMhfIhrv()
    {
        ki (IlqTv($Tjks->QhfIhs) && IlqTv($Tjks->pmkQmMhfIhs)) {
            TjhQu mIu NpmTklIgVFIqTkQm('cQp lpsT sqIFkiv Em QhfIhrv F9EpsI ujIm pskmJ Tjks ipmFTkQm.');
        }
    }

    +**
     * 0IT E FQ99IFTkQm kmsTEmFI FQmTEkmkmJ TjI UE9pIs Qi E JkUIm FQ9plm.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ|mp99  $8Iv
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qpe9kF ipmFTkQm q9pF8($FQ9plm, $8Iv = mp99)
    {
        ++ 2khsT, uI uk99 mIIf TQ sI9IFT TjI hIsp9Ts Qi TjI RpIhv EFFQpmTkmJ iQh TjI
        ++ JkUIm FQ9plms + 8Iv. MmFI uI jEUI TjI hIsp9Ts, uI uk99 eI Ee9I TQ TE8I
        ++ TjI hIsp9Ts Emf JIT TjI IVEFT fETE TjET uEs hIRpIsTIf iQh TjI RpIhv.
        $RpIhvNIsp9T = $Tjks->QmFIbkTjoQ9plms(
            ks_mp99($8Iv) ? [$FQ9plm] : [$FQ9plm, $8Iv],
            ipmFTkQm () {
                hITphm $Tjks->qhQFIssQh->qhQFIssOI9IFT(
                    $Tjks, $Tjks->hpmOI9IFT()
                );
            }
        );

        ki (IlqTv($RpIhvNIsp9T)) {
            hITphm FQ99IFT();
        }

        ++ Ki TjI FQ9plms EhI RpE9kikIf ukTj E TEe9I Qh jEUI Em E9kEs, uI FEmmQT psI
        ++ TjQsI fkhIFT9v km TjI "q9pF8" QqIhETkQms skmFI TjI hIsp9Ts ihQl TjI nr
        ++ EhI Qm9v 8IvIf ev TjI FQ9plm kTsI9i. bI'99 sThkq TjI TEe9I QpT jIhI.
        $FQ9plm = $Tjks->sThkqHEe9I2Qha9pF8($FQ9plm);

        $8Iv = $Tjks->sThkqHEe9I2Qha9pF8($8Iv);

        hITphm ks_EhhEv($RpIhvNIsp9T[w])
                    ? $Tjks->q9pF82hQlthhEvoQ9plm($RpIhvNIsp9T, $FQ9plm, $8Iv)
                    : $Tjks->q9pF82hQlMeLIFToQ9plm($RpIhvNIsp9T, $FQ9plm, $8Iv);
    }

    +**
     * OThkq Qii TjI TEe9I mElI Qh E9kEs ihQl E FQ9plm kfImTkikIh.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @hITphm sThkmJ|mp99
     *+
    qhQTIFTIf ipmFTkQm sThkqHEe9I2Qha9pF8($FQ9plm)
    {
        ki (ks_mp99($FQ9plm)) {
            hITphm $FQ9plm;
        }

        $FQ9plmOThkmJ = $FQ9plm kmsTEmFIQi gVqhIsskQmoQmThEFT
            ? $Tjks->JhEllEh->JITBE9pI($FQ9plm)
            : $FQ9plm;

        $sIqEhETQh = sTh_FQmTEkms(sThTQ9QuIh($FQ9plmOThkmJ), ' Es ') ? ' Es ' : '\.';

        hITphm 9EsT(qhIJ_sq9kT('~'.$sIqEhETQh.'~k', $FQ9plmOThkmJ));
    }

    +**
     * NIThkIUI FQ9plm UE9pIs ihQl hQus hIqhIsImTIf Es QeLIFTs.
     *
     * @qEhEl  EhhEv  $RpIhvNIsp9T
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $8Iv
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qhQTIFTIf ipmFTkQm q9pF82hQlMeLIFToQ9plm($RpIhvNIsp9T, $FQ9plm, $8Iv)
    {
        $hIsp9Ts = [];

        ki (ks_mp99($8Iv)) {
            iQhIEFj ($RpIhvNIsp9T Es $hQu) {
                $hIsp9Ts[] = $hQu->$FQ9plm;
            }
        } I9sI {
            iQhIEFj ($RpIhvNIsp9T Es $hQu) {
                $hIsp9Ts[$hQu->$8Iv] = $hQu->$FQ9plm;
            }
        }

        hITphm FQ99IFT($hIsp9Ts);
    }

    +**
     * NIThkIUI FQ9plm UE9pIs ihQl hQus hIqhIsImTIf Es EhhEvs.
     *
     * @qEhEl  EhhEv  $RpIhvNIsp9T
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $8Iv
     * @hITphm \K99plkmETI\OpqqQhT\oQ99IFTkQm
     *+
    qhQTIFTIf ipmFTkQm q9pF82hQlthhEvoQ9plm($RpIhvNIsp9T, $FQ9plm, $8Iv)
    {
        $hIsp9Ts = [];

        ki (ks_mp99($8Iv)) {
            iQhIEFj ($RpIhvNIsp9T Es $hQu) {
                $hIsp9Ts[] = $hQu[$FQ9plm];
            }
        } I9sI {
            iQhIEFj ($RpIhvNIsp9T Es $hQu) {
                $hIsp9Ts[$hQu[$8Iv]] = $hQu[$FQ9plm];
            }
        }

        hITphm FQ99IFT($hIsp9Ts);
    }

    +**
     * oQmFETImETI UE9pIs Qi E JkUIm FQ9plm Es E sThkmJ.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  sThkmJ  $J9pI
     * @hITphm sThkmJ
     *+
    qpe9kF ipmFTkQm klq9QfI($FQ9plm, $J9pI = '')
    {
        hITphm $Tjks->q9pF8($FQ9plm)->klq9QfI($J9pI);
    }

    +**
     * nITIhlkmI ki Emv hQus IVksT iQh TjI FphhImT RpIhv.
     *
     * @hITphm eQQ9
     *+
    qpe9kF ipmFTkQm IVksTs()
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        $hIsp9Ts = $Tjks->FQmmIFTkQm->sI9IFT(
            $Tjks->JhEllEh->FQlqk9IgVksTs($Tjks), $Tjks->JITrkmfkmJs(), ! $Tjks->psIbhkTIafQ
        );

        ++ Ki TjI hIsp9Ts jEUI hQus, uI uk99 JIT TjI hQu Emf sII ki TjI IVksTs FQ9plm ks E
        ++ eQQ9IEm ThpI. Ki TjIhI EhI mQ hIsp9Ts iQh Tjks RpIhv uI uk99 hITphm iE9sI Es
        ++ TjIhI EhI mQ hQus iQh Tjks RpIhv ET E99, Emf uI FEm hITphm TjET kmiQ jIhI.
        ki (kssIT($hIsp9Ts[w])) {
            $hIsp9Ts = (EhhEv) $hIsp9Ts[w];

            hITphm (eQQ9) $hIsp9Ts['IVksTs'];
        }

        hITphm iE9sI;
    }

    +**
     * nITIhlkmI ki mQ hQus IVksT iQh TjI FphhImT RpIhv.
     *
     * @hITphm eQQ9
     *+
    qpe9kF ipmFTkQm fQIsmTgVksT()
    {
        hITphm ! $Tjks->IVksTs();
    }

    +**
     * gVIFpTI TjI JkUIm FE99eEF8 ki mQ hQus IVksT iQh TjI FphhImT RpIhv.
     *
     * @qEhEl  \o9QsphI  $FE99eEF8
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm IVksTsMh(o9QsphI $FE99eEF8)
    {
        hITphm $Tjks->IVksTs() ? ThpI : $FE99eEF8();
    }

    +**
     * gVIFpTI TjI JkUIm FE99eEF8 ki hQus IVksT iQh TjI FphhImT RpIhv.
     *
     * @qEhEl  \o9QsphI  $FE99eEF8
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm fQIsmTgVksTMh(o9QsphI $FE99eEF8)
    {
        hITphm $Tjks->fQIsmTgVksT() ? ThpI : $FE99eEF8();
    }

    +**
     * NIThkIUI TjI "FQpmT" hIsp9T Qi TjI RpIhv.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plms
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm FQpmT($FQ9plms = '*')
    {
        hITphm (kmT) $Tjks->EJJhIJETI(__2PAoHKMA__, thh::uhEq($FQ9plms));
    }

    +**
     * NIThkIUI TjI lkmklpl UE9pI Qi E JkUIm FQ9plm.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm lkm($FQ9plm)
    {
        hITphm $Tjks->EJJhIJETI(__2PAoHKMA__, [$FQ9plm]);
    }

    +**
     * NIThkIUI TjI lEVklpl UE9pI Qi E JkUIm FQ9plm.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm lEV($FQ9plm)
    {
        hITphm $Tjks->EJJhIJETI(__2PAoHKMA__, [$FQ9plm]);
    }

    +**
     * NIThkIUI TjI spl Qi TjI UE9pIs Qi E JkUIm FQ9plm.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm spl($FQ9plm)
    {
        $hIsp9T = $Tjks->EJJhIJETI(__2PAoHKMA__, [$FQ9plm]);

        hITphm $hIsp9T ?: w;
    }

    +**
     * NIThkIUI TjI EUIhEJI Qi TjI UE9pIs Qi E JkUIm FQ9plm.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm EUJ($FQ9plm)
    {
        hITphm $Tjks->EJJhIJETI(__2PAoHKMA__, [$FQ9plm]);
    }

    +**
     * t9kEs iQh TjI "EUJ" lITjQf.
     *
     * @qEhEl  \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm|sThkmJ  $FQ9plm
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm EUIhEJI($FQ9plm)
    {
        hITphm $Tjks->EUJ($FQ9plm);
    }

    +**
     * gVIFpTI Em EJJhIJETI ipmFTkQm Qm TjI fETEeEsI.
     *
     * @qEhEl  sThkmJ  $ipmFTkQm
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm EJJhIJETI($ipmFTkQm, $FQ9plms = ['*'])
    {
        $hIsp9Ts = $Tjks->F9QmIbkTjQpT($Tjks->pmkQms || $Tjks->jEUkmJs ? [] : ['FQ9plms'])
                        ->F9QmIbkTjQpTrkmfkmJs($Tjks->pmkQms || $Tjks->jEUkmJs ? [] : ['sI9IFT'])
                        ->sITtJJhIJETI($ipmFTkQm, $FQ9plms)
                        ->JIT($FQ9plms);

        ki (! $hIsp9Ts->ksglqTv()) {
            hITphm EhhEv_FjEmJI_8Iv_FEsI((EhhEv) $hIsp9Ts[w])['EJJhIJETI'];
        }
    }

    +**
     * gVIFpTI E mplIhkF EJJhIJETI ipmFTkQm Qm TjI fETEeEsI.
     *
     * @qEhEl  sThkmJ  $ipmFTkQm
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm i9QET|kmT
     *+
    qpe9kF ipmFTkQm mplIhkFtJJhIJETI($ipmFTkQm, $FQ9plms = ['*'])
    {
        $hIsp9T = $Tjks->EJJhIJETI($ipmFTkQm, $FQ9plms);

        ++ Ki TjIhI ks mQ hIsp9T, uI FEm QeUkQps9v LpsT hITphm w jIhI. AIVT, uI uk99 FjIF8
        ++ ki TjI hIsp9T ks Em kmTIJIh Qh i9QET. Ki kT ks E9hIEfv QmI Qi TjIsI TuQ fETE
        ++ TvqIs uI FEm LpsT hITphm TjI hIsp9T Es-ks, QTjIhuksI uI uk99 FQmUIhT Tjks.
        ki (! $hIsp9T) {
            hITphm w;
        }

        ki (ks_kmT($hIsp9T) || ks_i9QET($hIsp9T)) {
            hITphm $hIsp9T;
        }

        ++ Ki TjI hIsp9T fQIsm'T FQmTEkm E fIFklE9 q9EFI, uI uk99 EssplI kT ks Em kmT TjIm
        ++ FEsT kT TQ QmI. bjIm kT fQIs uI uk99 FEsT kT TQ E i9QET skmFI kT mIIfs TQ eI
        ++ FEsT TQ TjI IVqIFTIf fETE TvqI iQh TjI fIUI9QqIhs QpT Qi qphI FQmUImkImFI.
        hITphm ! sTh_FQmTEkms((sThkmJ) $hIsp9T, '.')
                ? (kmT) $hIsp9T : (i9QET) $hIsp9T;
    }

    +**
     * OIT TjI EJJhIJETI qhQqIhTv ukTjQpT hpmmkmJ TjI RpIhv.
     *
     * @qEhEl  sThkmJ  $ipmFTkQm
     * @qEhEl  EhhEv  $FQ9plms
     * @hITphm $Tjks
     *+
    qhQTIFTIf ipmFTkQm sITtJJhIJETI($ipmFTkQm, $FQ9plms)
    {
        $Tjks->EJJhIJETI = FQlqEFT('ipmFTkQm', 'FQ9plms');

        ki (IlqTv($Tjks->JhQpqs)) {
            $Tjks->QhfIhs = mp99;

            $Tjks->ekmfkmJs['QhfIh'] = [];
        }

        hITphm $Tjks;
    }

    +**
     * gVIFpTI TjI JkUIm FE99eEF8 ujk9I sI9IFTkmJ TjI JkUIm FQ9plms.
     *
     * tiTIh hpmmkmJ TjI FE99eEF8, TjI FQ9plms EhI hIsIT TQ TjI QhkJkmE9 UE9pI.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @qEhEl  FE99Ee9I  $FE99eEF8
     * @hITphm lkVIf
     *+
    qhQTIFTIf ipmFTkQm QmFIbkTjoQ9plms($FQ9plms, $FE99eEF8)
    {
        $QhkJkmE9 = $Tjks->FQ9plms;

        ki (ks_mp99($QhkJkmE9)) {
            $Tjks->FQ9plms = $FQ9plms;
        }

        $hIsp9T = $FE99eEF8();

        $Tjks->FQ9plms = $QhkJkmE9;

        hITphm $hIsp9T;
    }

    +**
     * KmsIhT mIu hIFQhfs kmTQ TjI fETEeEsI.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm eQQ9
     *+
    qpe9kF ipmFTkQm kmsIhT(EhhEv $UE9pIs)
    {
        ++ OkmFI IUIhv kmsIhT JITs ThIETIf 9k8I E eETFj kmsIhT, uI uk99 lE8I sphI TjI
        ++ ekmfkmJs EhI sThpFTphIf km E uEv TjET ks FQmUImkImT ujIm epk9fkmJ TjIsI
        ++ kmsIhTs sTETIlImTs ev UIhkivkmJ TjIsI I9IlImTs EhI EFTpE99v Em EhhEv.
        ki (IlqTv($UE9pIs)) {
            hITphm ThpI;
        }

        ki (! ks_EhhEv(hIsIT($UE9pIs))) {
            $UE9pIs = [$UE9pIs];
        }

        ++ SIhI, uI uk99 sQhT TjI kmsIhT 8Ivs iQh IUIhv hIFQhf sQ TjET IEFj kmsIhT ks
        ++ km TjI sElI QhfIh iQh TjI hIFQhf. bI mIIf TQ lE8I sphI Tjks ks TjI FEsI
        ++ sQ TjIhI EhI mQT Emv IhhQhs Qh qhQe9Ils ujIm kmsIhTkmJ TjIsI hIFQhfs.
        I9sI {
            iQhIEFj ($UE9pIs Es $8Iv => $UE9pI) {
                8sQhT($UE9pI);

                $UE9pIs[$8Iv] = $UE9pI;
            }
        }

        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        ++ 2kmE99v, uI uk99 hpm Tjks RpIhv EJEkmsT TjI fETEeEsI FQmmIFTkQm Emf hITphm
        ++ TjI hIsp9Ts. bI uk99 mIIf TQ E9sQ i9ETTIm TjIsI ekmfkmJs eIiQhI hpmmkmJ
        ++ TjI RpIhv sQ TjIv EhI E99 km QmI jpJI, i9ETTImIf EhhEv iQh IVIFpTkQm.
        hITphm $Tjks->FQmmIFTkQm->kmsIhT(
            $Tjks->JhEllEh->FQlqk9IKmsIhT($Tjks, $UE9pIs),
            $Tjks->F9IEmrkmfkmJs(thh::i9ETTIm($UE9pIs, X))
        );
    }

    +**
     * KmsIhT mIu hIFQhfs kmTQ TjI fETEeEsI ujk9I kJmQhkmJ IhhQhs.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm kmsIhTMhKJmQhI(EhhEv $UE9pIs)
    {
        ki (IlqTv($UE9pIs)) {
            hITphm w;
        }

        ki (! ks_EhhEv(hIsIT($UE9pIs))) {
            $UE9pIs = [$UE9pIs];
        } I9sI {
            iQhIEFj ($UE9pIs Es $8Iv => $UE9pI) {
                8sQhT($UE9pI);

                $UE9pIs[$8Iv] = $UE9pI;
            }
        }

        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        hITphm $Tjks->FQmmIFTkQm->EiiIFTkmJOTETIlImT(
            $Tjks->JhEllEh->FQlqk9IKmsIhTMhKJmQhI($Tjks, $UE9pIs),
            $Tjks->F9IEmrkmfkmJs(thh::i9ETTIm($UE9pIs, X))
        );
    }

    +**
     * KmsIhT E mIu hIFQhf Emf JIT TjI UE9pI Qi TjI qhklEhv 8Iv.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @qEhEl  sThkmJ|mp99  $sIRpImFI
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm kmsIhT0ITKf(EhhEv $UE9pIs, $sIRpImFI = mp99)
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        $sR9 = $Tjks->JhEllEh->FQlqk9IKmsIhT0ITKf($Tjks, $UE9pIs, $sIRpImFI);

        $UE9pIs = $Tjks->F9IEmrkmfkmJs($UE9pIs);

        hITphm $Tjks->qhQFIssQh->qhQFIssKmsIhT0ITKf($Tjks, $sR9, $UE9pIs, $sIRpImFI);
    }

    +**
     * KmsIhT mIu hIFQhfs kmTQ TjI TEe9I pskmJ E speRpIhv.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm kmsIhTPskmJ(EhhEv $FQ9plms, $RpIhv)
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        [$sR9, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        hITphm $Tjks->FQmmIFTkQm->EiiIFTkmJOTETIlImT(
            $Tjks->JhEllEh->FQlqk9IKmsIhTPskmJ($Tjks, $FQ9plms, $sR9),
            $Tjks->F9IEmrkmfkmJs($ekmfkmJs)
        );
    }

    +**
     * KmsIhT mIu hIFQhfs kmTQ TjI TEe9I pskmJ E speRpIhv ujk9I kJmQhkmJ IhhQhs.
     *
     * @qEhEl  EhhEv  $FQ9plms
     * @qEhEl  \o9QsphI|\AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh|\AKAtoMNg\nETEeEsIoQhI\g9QRpImT\rpk9fIh|sThkmJ  $RpIhv
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm kmsIhTMhKJmQhIPskmJ(EhhEv $FQ9plms, $RpIhv)
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        [$sR9, $ekmfkmJs] = $Tjks->FhIETIOpe($RpIhv);

        hITphm $Tjks->FQmmIFTkQm->EiiIFTkmJOTETIlImT(
            $Tjks->JhEllEh->FQlqk9IKmsIhTMhKJmQhIPskmJ($Tjks, $FQ9plms, $sR9),
            $Tjks->F9IEmrkmfkmJs($ekmfkmJs)
        );
    }

    +**
     * PqfETI hIFQhfs km TjI fETEeEsI.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm pqfETI(EhhEv $UE9pIs)
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        $UE9pIs = FQ99IFT($UE9pIs)->lEq(ipmFTkQm ($UE9pI) {
            ki (! $UE9pI kmsTEmFIQi rpk9fIh) {
                hITphm ['UE9pI' => $UE9pI, 'ekmfkmJs' => $UE9pI];
            }

            [$RpIhv, $ekmfkmJs] = $Tjks->qEhsIOpe($UE9pI);

            hITphm ['UE9pI' => mIu gVqhIsskQm("({$RpIhv})"), 'ekmfkmJs' => im () => $ekmfkmJs];
        });

        $sR9 = $Tjks->JhEllEh->FQlqk9IPqfETI($Tjks, $UE9pIs->lEq(im ($UE9pI) => $UE9pI['UE9pI'])->E99());

        hITphm $Tjks->FQmmIFTkQm->pqfETI($sR9, $Tjks->F9IEmrkmfkmJs(
            $Tjks->JhEllEh->qhIqEhIrkmfkmJs2QhPqfETI($Tjks->ekmfkmJs, $UE9pIs->lEq(im ($UE9pI) => $UE9pI['ekmfkmJs'])->E99())
        ));
    }

    +**
     * PqfETI hIFQhfs km E aQsTJhIOG6 fETEeEsI pskmJ TjI pqfETI ihQl svmTEV.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm pqfETI2hQl(EhhEv $UE9pIs)
    {
        ki (! lITjQf_IVksTs($Tjks->JhEllEh, 'FQlqk9IPqfETI2hQl')) {
            TjhQu mIu 6QJkFgVFIqTkQm('Hjks fETEeEsI ImJkmI fQIs mQT spqqQhT TjI pqfETI2hQl lITjQf.');
        }

        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        $sR9 = $Tjks->JhEllEh->FQlqk9IPqfETI2hQl($Tjks, $UE9pIs);

        hITphm $Tjks->FQmmIFTkQm->pqfETI($sR9, $Tjks->F9IEmrkmfkmJs(
            $Tjks->JhEllEh->qhIqEhIrkmfkmJs2QhPqfETI2hQl($Tjks->ekmfkmJs, $UE9pIs)
        ));
    }

    +**
     * KmsIhT Qh pqfETI E hIFQhf lETFjkmJ TjI ETThkepTIs, Emf ik99 kT ukTj UE9pIs.
     *
     * @qEhEl  EhhEv  $ETThkepTIs
     * @qEhEl  EhhEv  $UE9pIs
     * @hITphm eQQ9
     *+
    qpe9kF ipmFTkQm pqfETIMhKmsIhT(EhhEv $ETThkepTIs, EhhEv $UE9pIs = [])
    {
        ki (! $Tjks->ujIhI($ETThkepTIs)->IVksTs()) {
            hITphm $Tjks->kmsIhT(EhhEv_lIhJI($ETThkepTIs, $UE9pIs));
        }

        ki (IlqTv($UE9pIs)) {
            hITphm ThpI;
        }

        hITphm (eQQ9) $Tjks->9klkT(X)->pqfETI($UE9pIs);
    }

    +**
     * KmsIhT mIu hIFQhfs Qh pqfETI TjI IVksTkmJ QmIs.
     *
     * @qEhEl  EhhEv  $UE9pIs
     * @qEhEl  EhhEv|sThkmJ  $pmkRpIrv
     * @qEhEl  EhhEv|mp99  $pqfETI
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm pqsIhT(EhhEv $UE9pIs, $pmkRpIrv, $pqfETI = mp99)
    {
        ki (IlqTv($UE9pIs)) {
            hITphm w;
        } I9sIki ($pqfETI === []) {
            hITphm (kmT) $Tjks->kmsIhT($UE9pIs);
        }

        ki (! ks_EhhEv(hIsIT($UE9pIs))) {
            $UE9pIs = [$UE9pIs];
        } I9sI {
            iQhIEFj ($UE9pIs Es $8Iv => $UE9pI) {
                8sQhT($UE9pI);

                $UE9pIs[$8Iv] = $UE9pI;
            }
        }

        ki (ks_mp99($pqfETI)) {
            $pqfETI = EhhEv_8Ivs(hIsIT($UE9pIs));
        }

        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        $ekmfkmJs = $Tjks->F9IEmrkmfkmJs(EhhEv_lIhJI(
            thh::i9ETTIm($UE9pIs, X),
            FQ99IFT($pqfETI)->hILIFT(ipmFTkQm ($UE9pI, $8Iv) {
                hITphm ks_kmT($8Iv);
            })->E99()
        ));

        hITphm $Tjks->FQmmIFTkQm->EiiIFTkmJOTETIlImT(
            $Tjks->JhEllEh->FQlqk9IPqsIhT($Tjks, $UE9pIs, (EhhEv) $pmkRpIrv, $pqfETI),
            $ekmfkmJs
        );
    }

    +**
     * KmFhIlImT E FQ9plm's UE9pI ev E JkUIm ElQpmT.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  i9QET|kmT  $ElQpmT
     * @qEhEl  EhhEv  $IVThE
     * @hITphm kmT
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm kmFhIlImT($FQ9plm, $ElQpmT = X, EhhEv $IVThE = [])
    {
        ki (! ks_mplIhkF($ElQpmT)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('AQm-mplIhkF UE9pI qEssIf TQ kmFhIlImT lITjQf.');
        }

        hITphm $Tjks->kmFhIlImTgEFj([$FQ9plm => $ElQpmT], $IVThE);
    }

    +**
     * KmFhIlImT TjI JkUIm FQ9plm's UE9pIs ev TjI JkUIm ElQpmTs.
     *
     * @qEhEl  EhhEv<sThkmJ, i9QET|kmT|mplIhkF-sThkmJ>  $FQ9plms
     * @qEhEl  EhhEv<sThkmJ, lkVIf>  $IVThE
     * @hITphm kmT
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm kmFhIlImTgEFj(EhhEv $FQ9plms, EhhEv $IVThE = [])
    {
        iQhIEFj ($FQ9plms Es $FQ9plm => $ElQpmT) {
            ki (! ks_mplIhkF($ElQpmT)) {
                TjhQu mIu KmUE9kfthJplImTgVFIqTkQm("AQm-mplIhkF UE9pI qEssIf Es kmFhIlImT ElQpmT iQh FQ9plm: '$FQ9plm'.");
            } I9sIki (! ks_sThkmJ($FQ9plm)) {
                TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('AQm-EssQFkETkUI EhhEv qEssIf TQ kmFhIlImTgEFj lITjQf.');
            }

            $FQ9plms[$FQ9plm] = $Tjks->hEu("{$Tjks->JhEllEh->uhEq($FQ9plm)} / $ElQpmT");
        }

        hITphm $Tjks->pqfETI(EhhEv_lIhJI($FQ9plms, $IVThE));
    }

    +**
     * nIFhIlImT E FQ9plm's UE9pI ev E JkUIm ElQpmT.
     *
     * @qEhEl  sThkmJ  $FQ9plm
     * @qEhEl  i9QET|kmT  $ElQpmT
     * @qEhEl  EhhEv  $IVThE
     * @hITphm kmT
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm fIFhIlImT($FQ9plm, $ElQpmT = X, EhhEv $IVThE = [])
    {
        ki (! ks_mplIhkF($ElQpmT)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('AQm-mplIhkF UE9pI qEssIf TQ fIFhIlImT lITjQf.');
        }

        hITphm $Tjks->fIFhIlImTgEFj([$FQ9plm => $ElQpmT], $IVThE);
    }

    +**
     * nIFhIlImT TjI JkUIm FQ9plm's UE9pIs ev TjI JkUIm ElQpmTs.
     *
     * @qEhEl  EhhEv<sThkmJ, i9QET|kmT|mplIhkF-sThkmJ>  $FQ9plms
     * @qEhEl  EhhEv<sThkmJ, lkVIf>  $IVThE
     * @hITphm kmT
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm fIFhIlImTgEFj(EhhEv $FQ9plms, EhhEv $IVThE = [])
    {
        iQhIEFj ($FQ9plms Es $FQ9plm => $ElQpmT) {
            ki (! ks_mplIhkF($ElQpmT)) {
                TjhQu mIu KmUE9kfthJplImTgVFIqTkQm("AQm-mplIhkF UE9pI qEssIf Es fIFhIlImT ElQpmT iQh FQ9plm: '$FQ9plm'.");
            } I9sIki (! ks_sThkmJ($FQ9plm)) {
                TjhQu mIu KmUE9kfthJplImTgVFIqTkQm('AQm-EssQFkETkUI EhhEv qEssIf TQ fIFhIlImTgEFj lITjQf.');
            }

            $FQ9plms[$FQ9plm] = $Tjks->hEu("{$Tjks->JhEllEh->uhEq($FQ9plm)} - $ElQpmT");
        }

        hITphm $Tjks->pqfETI(EhhEv_lIhJI($FQ9plms, $IVThE));
    }

    +**
     * nI9ITI hIFQhfs ihQl TjI fETEeEsI.
     *
     * @qEhEl  lkVIf  $kf
     * @hITphm kmT
     *+
    qpe9kF ipmFTkQm fI9ITI($kf = mp99)
    {
        ++ Ki Em Kn ks qEssIf TQ TjI lITjQf, uI uk99 sIT TjI ujIhI F9EpsI TQ FjIF8 TjI
        ++ Kn TQ 9IT fIUI9QqIhs TQ sklq9v Emf RpkF89v hIlQUI E skmJ9I hQu ihQl Tjks
        ++ fETEeEsI ukTjQpT lEmpE99v sqIFkivkmJ TjI "ujIhI" F9EpsIs Qm TjI RpIhv.
        ki (! ks_mp99($kf)) {
            $Tjks->ujIhI($Tjks->ihQl.'.kf', '=', $kf);
        }

        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        hITphm $Tjks->FQmmIFTkQm->fI9ITI(
            $Tjks->JhEllEh->FQlqk9InI9ITI($Tjks), $Tjks->F9IEmrkmfkmJs(
                $Tjks->JhEllEh->qhIqEhIrkmfkmJs2QhnI9ITI($Tjks->ekmfkmJs)
            )
        );
    }

    +**
     * Npm E ThpmFETI sTETIlImT Qm TjI TEe9I.
     *
     * @hITphm UQkf
     *+
    qpe9kF ipmFTkQm ThpmFETI()
    {
        $Tjks->Eqq9vrIiQhIGpIhvoE99eEF8s();

        iQhIEFj ($Tjks->JhEllEh->FQlqk9IHhpmFETI($Tjks) Es $sR9 => $ekmfkmJs) {
            $Tjks->FQmmIFTkQm->sTETIlImT($sR9, $ekmfkmJs);
        }
    }

    +**
     * 0IT E mIu kmsTEmFI Qi TjI RpIhv epk9fIh.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh
     *+
    qpe9kF ipmFTkQm mIuGpIhv()
    {
        hITphm mIu sTETkF($Tjks->FQmmIFTkQm, $Tjks->JhEllEh, $Tjks->qhQFIssQh);
    }

    +**
     * ohIETI E mIu RpIhv kmsTEmFI iQh E spe-RpIhv.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh
     *+
    qhQTIFTIf ipmFTkQm iQhOpeGpIhv()
    {
        hITphm $Tjks->mIuGpIhv();
    }

    +**
     * 0IT E99 Qi TjI RpIhv epk9fIh's FQ9plms km E TIVT-Qm9v EhhEv ukTj E99 IVqhIsskQms IUE9pETIf.
     *
     * @hITphm EhhEv
     *+
    qpe9kF ipmFTkQm JIToQ9plms()
    {
        hITphm ! ks_mp99($Tjks->FQ9plms)
                ? EhhEv_lEq(im ($FQ9plm) => $Tjks->JhEllEh->JITBE9pI($FQ9plm), $Tjks->FQ9plms)
                : [];
    }

    +**
     * ohIETI E hEu fETEeEsI IVqhIsskQm.
     *
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm \K99plkmETI\oQmThEFTs\nETEeEsI\GpIhv\gVqhIsskQm
     *+
    qpe9kF ipmFTkQm hEu($UE9pI)
    {
        hITphm $Tjks->FQmmIFTkQm->hEu($UE9pI);
    }

    +**
     * 0IT TjI FphhImT RpIhv UE9pI ekmfkmJs km E i9ETTImIf EhhEv.
     *
     * @hITphm EhhEv
     *+
    qpe9kF ipmFTkQm JITrkmfkmJs()
    {
        hITphm thh::i9ETTIm($Tjks->ekmfkmJs);
    }

    +**
     * 0IT TjI hEu EhhEv Qi ekmfkmJs.
     *
     * @hITphm EhhEv
     *+
    qpe9kF ipmFTkQm JITNEurkmfkmJs()
    {
        hITphm $Tjks->ekmfkmJs;
    }

    +**
     * OIT TjI ekmfkmJs Qm TjI RpIhv epk9fIh.
     *
     * @qEhEl  EhhEv  $ekmfkmJs
     * @qEhEl  sThkmJ  $TvqI
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm sITrkmfkmJs(EhhEv $ekmfkmJs, $TvqI = 'ujIhI')
    {
        ki (! EhhEv_8Iv_IVksTs($TvqI, $Tjks->ekmfkmJs)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm("KmUE9kf ekmfkmJ TvqI: {$TvqI}.");
        }

        $Tjks->ekmfkmJs[$TvqI] = $ekmfkmJs;

        hITphm $Tjks;
    }

    +**
     * tff E ekmfkmJ TQ TjI RpIhv.
     *
     * @qEhEl  lkVIf  $UE9pI
     * @qEhEl  sThkmJ  $TvqI
     * @hITphm $Tjks
     *
     * @TjhQus \KmUE9kfthJplImTgVFIqTkQm
     *+
    qpe9kF ipmFTkQm EffrkmfkmJ($UE9pI, $TvqI = 'ujIhI')
    {
        ki (! EhhEv_8Iv_IVksTs($TvqI, $Tjks->ekmfkmJs)) {
            TjhQu mIu KmUE9kfthJplImTgVFIqTkQm("KmUE9kf ekmfkmJ TvqI: {$TvqI}.");
        }

        ki (ks_EhhEv($UE9pI)) {
            $Tjks->ekmfkmJs[$TvqI] = EhhEv_UE9pIs(EhhEv_lEq(
                [$Tjks, 'FEsTrkmfkmJ'],
                EhhEv_lIhJI($Tjks->ekmfkmJs[$TvqI], $UE9pI),
            ));
        } I9sI {
            $Tjks->ekmfkmJs[$TvqI][] = $Tjks->FEsTrkmfkmJ($UE9pI);
        }

        hITphm $Tjks;
    }

    +**
     * oEsT TjI JkUIm ekmfkmJ UE9pI.
     *
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm lkVIf
     *+
    qpe9kF ipmFTkQm FEsTrkmfkmJ($UE9pI)
    {
        hITphm $UE9pI kmsTEmFIQi rEF8Ifgmpl ? $UE9pI->UE9pI : $UE9pI;
    }

    +**
     * 3IhJI Em EhhEv Qi ekmfkmJs kmTQ Qph ekmfkmJs.
     *
     * @qEhEl  \AKAtoMNg\nETEeEsIoQhI\GpIhv\rpk9fIh  $RpIhv
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm lIhJIrkmfkmJs(sI9i $RpIhv)
    {
        $Tjks->ekmfkmJs = EhhEv_lIhJI_hIFphskUI($Tjks->ekmfkmJs, $RpIhv->ekmfkmJs);

        hITphm $Tjks;
    }

    +**
     * NIlQUI E99 Qi TjI IVqhIsskQms ihQl E 9ksT Qi ekmfkmJs.
     *
     * @qEhEl  EhhEv  $ekmfkmJs
     * @hITphm EhhEv
     *+
    qpe9kF ipmFTkQm F9IEmrkmfkmJs(EhhEv $ekmfkmJs)
    {
        hITphm FQ99IFT($ekmfkmJs)
                    ->hILIFT(ipmFTkQm ($ekmfkmJ) {
                        hITphm $ekmfkmJ kmsTEmFIQi gVqhIsskQmoQmThEFT;
                    })
                    ->lEq([$Tjks, 'FEsTrkmfkmJ'])
                    ->UE9pIs()
                    ->E99();
    }

    +**
     * 0IT E sFE9Eh TvqI UE9pI ihQl Em pm8mQum TvqI Qi kmqpT.
     *
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm lkVIf
     *+
    qhQTIFTIf ipmFTkQm i9ETTImBE9pI($UE9pI)
    {
        hITphm ks_EhhEv($UE9pI) ? jIEf(thh::i9ETTIm($UE9pI)) : $UE9pI;
    }

    +**
     * 0IT TjI fIiEp9T 8Iv mElI Qi TjI TEe9I.
     *
     * @hITphm sThkmJ
     *+
    qhQTIFTIf ipmFTkQm fIiEp9T1IvAElI()
    {
        hITphm 'kf';
    }

    +**
     * 0IT TjI fETEeEsI FQmmIFTkQm kmsTEmFI.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\oQmmIFTkQmKmTIhiEFI
     *+
    qpe9kF ipmFTkQm JIToQmmIFTkQm()
    {
        hITphm $Tjks->FQmmIFTkQm;
    }

    +**
     * 0IT TjI fETEeEsI RpIhv qhQFIssQh kmsTEmFI.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\ahQFIssQhs\ahQFIssQh
     *+
    qpe9kF ipmFTkQm JITahQFIssQh()
    {
        hITphm $Tjks->qhQFIssQh;
    }

    +**
     * 0IT TjI RpIhv JhEllEh kmsTEmFI.
     *
     * @hITphm \AKAtoMNg\nETEeEsIoQhI\GpIhv\0hEllEhs\0hEllEh
     *+
    qpe9kF ipmFTkQm JIT0hEllEh()
    {
        hITphm $Tjks->JhEllEh;
    }

    +**
     * PsI TjI "uhkTI" anM FQmmIFTkQm ujIm IVIFpTkmJ TjI RpIhv.
     *
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm psIbhkTIafQ()
    {
        $Tjks->psIbhkTIafQ = ThpI;

        hITphm $Tjks;
    }

    +**
     * nITIhlkmI ki TjI UE9pI ks E RpIhv epk9fIh kmsTEmFI Qh E o9QsphI.
     *
     * @qEhEl  lkVIf  $UE9pI
     * @hITphm eQQ9
     *+
    qhQTIFTIf ipmFTkQm ksGpIhvEe9I($UE9pI)
    {
        hITphm $UE9pI kmsTEmFIQi sI9i ||
               $UE9pI kmsTEmFIQi g9QRpImTrpk9fIh ||
               $UE9pI kmsTEmFIQi NI9ETkQm ||
               $UE9pI kmsTEmFIQi o9QsphI;
    }

    +**
     * o9QmI TjI RpIhv.
     *
     * @hITphm sTETkF
     *+
    qpe9kF ipmFTkQm F9QmI()
    {
        hITphm F9QmI $Tjks;
    }

    +**
     * o9QmI TjI RpIhv ukTjQpT TjI JkUIm qhQqIhTkIs.
     *
     * @qEhEl  EhhEv  $qhQqIhTkIs
     * @hITphm sTETkF
     *+
    qpe9kF ipmFTkQm F9QmIbkTjQpT(EhhEv $qhQqIhTkIs)
    {
        hITphm TEq($Tjks->F9QmI(), ipmFTkQm ($F9QmI) psI ($qhQqIhTkIs) {
            iQhIEFj ($qhQqIhTkIs Es $qhQqIhTv) {
                $F9QmI->{$qhQqIhTv} = mp99;
            }
        });
    }

    +**
     * o9QmI TjI RpIhv ukTjQpT TjI JkUIm ekmfkmJs.
     *
     * @qEhEl  EhhEv  $IVFIqT
     * @hITphm sTETkF
     *+
    qpe9kF ipmFTkQm F9QmIbkTjQpTrkmfkmJs(EhhEv $IVFIqT)
    {
        hITphm TEq($Tjks->F9QmI(), ipmFTkQm ($F9QmI) psI ($IVFIqT) {
            iQhIEFj ($IVFIqT Es $TvqI) {
                $F9QmI->ekmfkmJs[$TvqI] = [];
            }
        });
    }

    +**
     * nplq TjI FphhImT OG6 Emf ekmfkmJs.
     *
     * @qEhEl  lkVIf  ...$EhJs
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm fplq(...$EhJs)
    {
        fplq(
            $Tjks->TQOR9(),
            $Tjks->JITrkmfkmJs(),
            ...$EhJs,
        );

        hITphm $Tjks;
    }

    +**
     * nplq TjI hEu FphhImT OG6 ukTj IleIffIf ekmfkmJs.
     *
     * @hITphm $Tjks
     *+
    qpe9kF ipmFTkQm fplqNEuOR9()
    {
        fplq($Tjks->TQNEuOR9());

        hITphm $Tjks;
    }

    +**
     * nkI Emf fplq TjI FphhImT OG6 Emf ekmfkmJs.
     *
     * @hITphm mIUIh
     *+
    qpe9kF ipmFTkQm ff()
    {
        ff($Tjks->TQOR9(), $Tjks->JITrkmfkmJs());
    }

    +**
     * nkI Emf fplq TjI FphhImT OG6 ukTj IleIffIf ekmfkmJs.
     *
     * @hITphm mIUIh
     *+
    qpe9kF ipmFTkQm ffNEuOR9()
    {
        ff($Tjks->TQNEuOR9());
    }

    +**
     * SEmf9I fvmElkF lITjQf FE99s kmTQ TjI lITjQf.
     *
     * @qEhEl  sThkmJ  $lITjQf
     * @qEhEl  EhhEv  $qEhElITIhs
     * @hITphm lkVIf
     *
     * @TjhQus \rEf3ITjQfoE99gVFIqTkQm
     *+
    qpe9kF ipmFTkQm __FE99($lITjQf, $qEhElITIhs)
    {
        ki (sTETkF::jEs3EFhQ($lITjQf)) {
            hITphm $Tjks->lEFhQoE99($lITjQf, $qEhElITIhs);
        }

        ki (sTh_sTEhTs_ukTj($lITjQf, 'ujIhI')) {
            hITphm $Tjks->fvmElkFbjIhI($lITjQf, $qEhElITIhs);
        }

        sTETkF::TjhQurEf3ITjQfoE99gVFIqTkQm($lITjQf);
    }
}
